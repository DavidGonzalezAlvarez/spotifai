{"ast":null,"code":"var _jsxFileName = \"D:\\\\Proyectos\\\\Practicas\\\\spotifai\\\\app-web\\\\src\\\\pages\\\\Admin.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Admin.css';\nimport trash from \"../assets/trash.svg\";\nimport axios from \"axios\";\nimport rightArrow from \"../assets/rightArrow.svg\";\nimport leftArrow from \"../assets/leftArrow.svg\";\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst server_url = process.env.REACT_APP_SERVER_URL;\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport default function Admin() {\n  _s();\n  const [activeButton, setActiveButton] = useState(null);\n  const [fetchedSongs, setFetchedSongs] = useState(false);\n  const [fetchedArtists, setFetchedArtists] = useState(false);\n  const [songs, setSongs] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [pageSongs, setPageSongs] = useState(1);\n  const [pageArtists, setPageArtists] = useState(1);\n  const [pageUsers, setPageUsers] = useState(1);\n  const [totalSongs, setTotalSongs] = useState(0);\n  const [totalArtists, setTotalArtists] = useState(0);\n  const [totalUsers, setTotalUsers] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [paginationDisabled, setPaginationDisabled] = useState(false);\n  const [searchTermSongs, setSearchTermSongs] = useState(\"\");\n  const [searchTermArtists, setSearchTermArtists] = useState(\"\");\n  const [searchTermUsers, setSearchTermUsers] = useState(\"\");\n  const [searchTermGenre, setSearchTermGenre] = useState(\"\");\n  const [selectedGenre, setSelectedGenre] = useState(\"\");\n  const [genres, setGenres] = useState([]);\n  const [searchTermCountry, setSearchTermCountry] = useState(\"\");\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [country, setCountry] = useState([]);\n  const [usuariosPorPais, setUsuariosPorPais] = useState();\n  const [cancionesPorGenero, setCancionesPorGenero] = useState();\n  const limit = 10;\n  const chartOptions = title => ({\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top'\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          autoSkip: false,\n          maxRotation: 90,\n          minRotation: 45\n        }\n      },\n      y: {\n        beginAtZero: true\n      }\n    }\n  });\n  const formatFollowers = followers => {\n    return new Intl.NumberFormat().format(followers);\n  };\n  const formatDuration = durationMs => {\n    const totalSeconds = Math.round(durationMs / 1000); // Convertir a segundos\n    const minutes = Math.floor(totalSeconds / 60); // Obtener los minutos\n    const seconds = totalSeconds % 60; // Obtener los segundos restantes\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`; // Formato \"minutos:segundos\"\n  };\n  const formatGenres = genres => {\n    if (!genres || genres.length === 0) {\n      return \"Sin géneros\"; // Si no tiene géneros\n    }\n    if (genres.length > 3) {\n      return `${genres.slice(0, 3).join(\", \")}...`; // Si tiene más de 3 géneros, mostrar los 3 primeros y '...'\n    }\n    return genres.join(\", \"); // Si tiene 3 o menos géneros, mostramos todos\n  };\n  const pressed = button => {\n    setActiveButton(prev => prev === button ? null : button);\n  };\n  useEffect(() => {\n    const fetchSpotifyData = async () => {\n      setLoading(true); // Inicia el loading mientras enriquecemos las canciones con datos de Spotify\n\n      const enrichedSongs = await Promise.all(songs.map(async song => {\n        if (!song.spotify) {\n          // Verificamos si la canción ya tiene datos de Spotify\n          try {\n            const response = await axios.get(`${server_url}/get/songInfo?songName=${encodeURIComponent(song.title)}`, {\n              withCredentials: true\n            });\n            const parsed = JSON.parse(response.data.tracks);\n            const track = parsed.tracks.items[0];\n            return {\n              ...song,\n              spotify: track\n            };\n          } catch (err) {\n            return {\n              ...song,\n              spotify: null\n            };\n          }\n        }\n        return song; // Si ya tiene datos de Spotify, la retornamos tal cual\n      }));\n      setLoading(false);\n      setSongs(enrichedSongs);\n      setFetchedSongs(false);\n    };\n    if (activeButton === \"songs\" && fetchedSongs) {\n      fetchSpotifyData();\n    }\n  }, [fetchedSongs]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"songs\") {\n        try {\n          let songsResponse;\n          let totalSongsResponse;\n          if (selectedGenre === \"\") {\n            songsResponse = await axios.get(`${server_url}/api/get/songs?page=${pageSongs}&limit=${limit}`);\n            totalSongsResponse = await axios.get(`${server_url}/api/get/songs/count`);\n          } else {\n            songsResponse = await axios.get(`${server_url}/api/get/songs/${selectedGenre}?page=${pageSongs}&limit=${limit}`);\n            totalSongsResponse = await axios.get(`${server_url}/api/get/songs/count?genre=${selectedGenre}`);\n          }\n          setSongs(songsResponse.data);\n          setTotalSongs(totalSongsResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching songs data:', error);\n        }\n      }\n      setFetchedSongs(true);\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"songs\" && !paginationDisabled) {\n      fetchData();\n    }\n  }, [activeButton, pageSongs, paginationDisabled, selectedGenre]);\n  useEffect(() => {\n    const fetchSpotifyData = async () => {\n      setLoading(true); // Inicia el loading mientras enriquecemos los artistas con datos de Spotify\n      const enrichedArtists = await Promise.all(artists.map(async artist => {\n        if (!artist.spotify) {\n          // Verificamos si el artista ya tiene datos de Spotify\n          try {\n            const response = await axios.get(`${server_url}/get/artistInfo?artistName=${encodeURIComponent(artist.name)}`, {\n              withCredentials: true\n            });\n            const artistData = response.data;\n            return {\n              ...artist,\n              spotify: artistData\n            };\n          } catch (err) {\n            return {\n              ...artist,\n              spotify: null\n            }; // Si hay un error, retornamos el artista sin datos de Spotify\n          }\n        }\n        return artist; // Si ya tiene datos de Spotify, lo retornamos tal cual\n      }));\n      setLoading(false);\n      setArtists(enrichedArtists); // Actualizamos el estado con los artistas enriquecidos\n      setFetchedArtists(false);\n    };\n    if (activeButton === \"artists\" && fetchedArtists) {\n      fetchSpotifyData();\n    }\n  }, [fetchedArtists]); // El efecto se ejecutará cuando 'fetchedArtists' cambie\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"artists\") {\n        try {\n          const artistsResponse = await axios.get(`${server_url}/api/get/artists?page=${pageArtists}&limit=${limit}`);\n          const totalArtistsResponse = await axios.get(`${server_url}/api/get/artists/count`);\n          setArtists(artistsResponse.data);\n          setTotalArtists(totalArtistsResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching artists data:', error);\n        }\n      }\n      setFetchedArtists(true);\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"artists\" && !paginationDisabled) {\n      fetchData();\n    }\n  }, [activeButton, pageArtists, paginationDisabled]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"users\") {\n        try {\n          let usersResponse;\n          let totalUsersResponse;\n          if (selectedCountry === \"\") {\n            usersResponse = await axios.get(`${server_url}/api/get/users?page=${pageUsers}&limit=${limit}`);\n            totalUsersResponse = await axios.get(`${server_url}/api/get/users/count`);\n          } else {\n            usersResponse = await axios.get(`${server_url}/api/get/users/${obtenerCodigoPais(selectedCountry)}?page=${pageUsers}&limit=${limit}`);\n            totalUsersResponse = await axios.get(`${server_url}/api/get/users/count?pais=${obtenerCodigoPais(selectedCountry)}`);\n          }\n          setUsers(usersResponse.data);\n          setTotalUsers(totalUsersResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching artists data:', error);\n        }\n      }\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"users\" && !paginationDisabled) {\n      fetchData();\n    }\n  }, [activeButton, pageUsers, paginationDisabled, selectedCountry]);\n  useEffect(() => {\n    axios.get(server_url + \"/api/get/genres\").then(res => {\n      setGenres(res.data);\n    });\n  }, []);\n  useEffect(() => {\n    axios.get(server_url + \"/api/get/paises\").then(res => {\n      const paisesTraducidos = res.data.map(codigo => traducirCodigoPais(codigo));\n      setCountry(paisesTraducidos);\n    });\n  }, []);\n  useEffect(() => {\n    setUsuariosPorPais({\n      labels: country,\n      datasets: [{\n        label: 'Usuarios',\n        data: [10, 5, 7],\n        backgroundColor: ['#4CAF50', '#2196F3', '#FF9800']\n      }]\n    });\n    setCancionesPorGenero({\n      labels: genres,\n      datasets: [{\n        label: 'Canciones',\n        data: [20, 15, 25, 10, 20, 15, 25, 10, 20, 15, 25, 10, 20, 15, 25, 10, 20, 15, 25, 10],\n        backgroundColor: ['#9C27B0', '#E91E63', '#FFC107', '#00BCD4']\n      }]\n    });\n  }, [genres, country]);\n  useEffect(() => {\n    if (activeButton === \"graphs\") {\n      setLoading(true);\n      const peticionesUsuarios = country.map(pais => axios.get(`${server_url}/api/get/users/count?pais=${obtenerCodigoPais(pais)}`));\n      const peticionesGeneros = genres.map(genero => axios.get(`${server_url}/api/get/songs/count?genre=${genero}`));\n      Promise.all([Promise.all(peticionesUsuarios), Promise.all(peticionesGeneros)]).then(([resUsuarios, resGeneros]) => {\n        const datosUsuarios = resUsuarios.map(res => res.data.total);\n        const datosGeneros = resGeneros.map(res => res.data.total);\n        setUsuariosPorPais({\n          labels: country,\n          datasets: [{\n            label: 'Usuarios',\n            data: datosUsuarios,\n            backgroundColor: ['#4CAF50', '#2196F3', '#FF9800']\n          }]\n        });\n        setCancionesPorGenero({\n          labels: genres,\n          datasets: [{\n            label: 'Canciones',\n            data: datosGeneros,\n            backgroundColor: ['#9C27B0', '#E91E63', '#FFC107', '#00BCD4']\n          }]\n        });\n      }).finally(() => {\n        setLoading(false);\n      });\n    }\n  }, [activeButton, country, genres]);\n  const searchArtists = async query => {\n    try {\n      const response = await axios.get(`/api/search/artists`, {\n        params: {\n          q: query\n        }\n      });\n      setArtists(response.data);\n      setFetchedArtists(true);\n    } catch (error) {\n      console.error('Error al buscar artistas:', error);\n      return [];\n    }\n  };\n  const searchSongs = async query => {\n    try {\n      const response = await axios.get(server_url + `/api/search/songs`, {\n        params: {\n          q: query\n        }\n      });\n      setSongs(response.data);\n      setFetchedSongs(true);\n    } catch (error) {\n      console.error('Error al buscar canciones:', error);\n      return [];\n    }\n  };\n  const searchUsers = async query => {\n    try {\n      const response = await axios.get(server_url + `/api/search/users`, {\n        params: {\n          q: query\n        }\n      });\n      setUsers(response.data);\n    } catch (error) {\n      console.error('Error al buscar canciones:', error);\n      return [];\n    }\n  };\n  const handleSearchArtists = () => {\n    if (searchTermArtists === \"\") {\n      setPaginationDisabled(false);\n    } else {\n      searchArtists(searchTermArtists);\n      setPaginationDisabled(true);\n    }\n  };\n  const handleSearchSongs = () => {\n    if (searchTermSongs === \"\") {\n      setPaginationDisabled(false);\n    } else {\n      searchSongs(searchTermSongs);\n      setPaginationDisabled(true);\n    }\n  };\n  const handleSearchSongsGenre = () => {\n    setSelectedGenre(searchTermGenre);\n  };\n  const handleSearchUsers = () => {\n    if (searchTermUsers === \"\") {\n      setPaginationDisabled(false);\n    } else {\n      searchUsers(searchTermUsers);\n      setPaginationDisabled(true);\n    }\n  };\n  const handleSearchUsersContry = () => {\n    setSelectedCountry(searchTermCountry);\n  };\n  const handleDeleteSong = async id => {\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar esta canción?\")) return;\n    try {\n      await axios.delete(server_url + `/api/delete/song/${id}`);\n      setSongs(prev => prev.filter(song => song.id !== id));\n    } catch (err) {\n      console.error(\"Error al eliminar canción:\", err);\n      alert(\"Error al eliminar la canción.\");\n    }\n  };\n  const handleDeleteAdmin = async id => {\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este artista?\")) return;\n    try {\n      await axios.delete(server_url + `/api/delete/artists/${id}`);\n      setArtists(prev => prev.filter(artist => artist.id !== id));\n    } catch (err) {\n      console.error(\"Error al eliminar el artista:\", err);\n      alert(\"Error al eliminar la artista.\");\n    }\n  };\n  const handleDeleteUser = async id => {\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este usuario?\")) return;\n    try {\n      await axios.delete(server_url + `/api/delete/users/${id}`);\n      setUsers(prev => prev.filter(user => user.id !== id));\n    } catch (err) {\n      console.error(\"Error al eliminar el Usuario:\", err);\n      alert(\"Error al eliminar la artista.\");\n    }\n  };\n  function traducirCodigoPais(codigoIso) {\n    const regionNames = new Intl.DisplayNames(['es'], {\n      type: 'region'\n    });\n    return regionNames.of(codigoIso.toUpperCase());\n  }\n  function obtenerCodigoPais(nombrePais) {\n    const regionNames = new Intl.DisplayNames(['es'], {\n      type: 'region'\n    });\n    const codigos = [];\n    for (let i = 65; i <= 90; i++) {\n      for (let j = 65; j <= 90; j++) {\n        const codigo = String.fromCharCode(i) + String.fromCharCode(j);\n        const nombre = regionNames.of(codigo);\n        if (nombre) {\n          codigos.push({\n            codigo,\n            nombre\n          });\n        }\n      }\n    }\n    const normalizar = str => str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n    const nombreNormalizado = normalizar(nombrePais);\n    const resultado = codigos.find(p => normalizar(p.nombre) === nombreNormalizado);\n    return resultado ? resultado.codigo : null;\n  }\n  const renderPagination = (currentPage, total, onPageChange) => {\n    const totalPages = Math.ceil(total / limit);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pagination-button\",\n        disabled: currentPage === 1 || paginationDisabled,\n        onClick: () => onPageChange(currentPage - 1),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: leftArrow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 144\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"pagination-text\",\n        children: [\"P\\xE1gina \", currentPage, \" de \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pagination-button\",\n        disabled: currentPage === totalPages || paginationDisabled,\n        onClick: () => onPageChange(currentPage + 1),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: rightArrow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 153\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"users\"),\n        className: `sidebar-btn ${activeButton === \"users\" ? \"pressed\" : \"\"}`,\n        children: \"Usuarios\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"songs\"),\n        className: `sidebar-btn ${activeButton === \"songs\" ? \"pressed\" : \"\"}`,\n        children: \"Canciones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"artists\"),\n        className: `sidebar-btn ${activeButton === \"artists\" ? \"pressed\" : \"\"}`,\n        children: \"Artistas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"graphs\"),\n        className: `sidebar-btn ${activeButton === \"graphs\" ? \"pressed\" : \"\"}`,\n        children: \"Gr\\xE1ficos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"admin-header\",\n        children: \"Panel de admin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this), activeButton === \"users\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Buscar usuarios...\",\n            className: \"admin-input\",\n            value: searchTermUsers,\n            onChange: e => setSearchTermUsers(e.target.value),\n            onKeyDown: e => {\n              if (e.key === \"Enter\") {\n                handleSearchUsers();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            list: \"country-options\",\n            placeholder: \"Filtrar por pais...\",\n            className: \"admin-input\",\n            value: searchTermCountry,\n            onChange: e => setSearchTermCountry(e.target.value),\n            onKeyDown: e => {\n              if (e.key === \"Enter\") {\n                handleSearchUsersContry();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n          id: \"country-options\",\n          children: country.map((contry, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: contry\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 15\n        }, this) : users.map((user, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"admin-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: user.imagen,\n            alt: \"Cover\",\n            className: \"row-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"row-name\",\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"row-info\",\n            children: [\"Pais: \", traducirCodigoPais(user.pais)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"row-info\",\n            children: [\"Id: \", user.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteUser(user.id),\n            className: \"row-trash\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: trash,\n              alt: \"Eliminar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 21\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 19\n        }, this)), renderPagination(pageUsers, totalUsers, setPageUsers)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }, this), activeButton === \"songs\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Buscar canciones...\",\n            className: \"admin-input\",\n            value: searchTermSongs,\n            onChange: e => setSearchTermSongs(e.target.value),\n            onKeyDown: e => {\n              if (e.key === \"Enter\") {\n                handleSearchSongs();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            list: \"genre-options\",\n            placeholder: \"Filtrar por g\\xE9nero...\",\n            className: \"admin-input\",\n            value: searchTermGenre,\n            onChange: e => setSearchTermGenre(e.target.value),\n            onKeyDown: e => {\n              if (e.key === \"Enter\") {\n                handleSearchSongsGenre();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n          id: \"genre-options\",\n          children: genres.map((genre, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: genre\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 11\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, this) : songs.map((song, i) => {\n          var _song$spotify$album$i;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-row\",\n            children: song.spotify ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: (_song$spotify$album$i = song.spotify.album.images[0]) === null || _song$spotify$album$i === void 0 ? void 0 : _song$spotify$album$i.url,\n                alt: \"Cover\",\n                className: \"row-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 593,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"row-name\",\n                children: song.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 598,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"\\xC1lbum: \", song.spotify.album.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"Duraci\\xF3n: \", formatDuration(song.spotify.duration_ms)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteSong(song.spotify.id),\n                className: \"row-trash\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: trash,\n                  alt: \"Eliminar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 605,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"row-name\",\n              children: song.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 19\n            }, this) // Solo muestra el nombre si no hay información de Spotify\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 15\n          }, this);\n        }), renderPagination(pageSongs, totalSongs, setPageSongs)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this), activeButton === \"artists\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar artistas...\",\n          className: \"admin-input\",\n          value: searchTermArtists,\n          onChange: e => setSearchTermArtists(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleSearchArtists();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 17\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 17\n        }, this) : artists.map((artist, i) => {\n          var _artist$spotify$image;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-row\",\n            children: artist.spotify ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: ((_artist$spotify$image = artist.spotify.images[0]) === null || _artist$spotify$image === void 0 ? void 0 : _artist$spotify$image.url) || 'https://via.placeholder.com/50',\n                alt: artist.name,\n                className: \"row-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"row-name\",\n                children: artist.spotify.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"G\\xE9neros: \", formatGenres(artist.spotify.genres)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 649,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"Seguidores: \", formatFollowers(artist.spotify.followers)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 650,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  handleDeleteAdmin(artist.id);\n                },\n                className: \"row-trash\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: trash,\n                  alt: \"Eliminar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 652,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 651,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"row-name\",\n              children: artist.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 25\n            }, this) // Solo muestra el nombre si no hay información de Spotify\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 21\n          }, this);\n        }), renderPagination(pageArtists, totalArtists, setPageArtists)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 13\n      }, this), activeButton === \"graphs\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"admin-text\",\n          children: \"Mostrando gr\\xE1ficos...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"charts-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart\",\n            children: /*#__PURE__*/_jsxDEV(Bar, {\n              data: usuariosPorPais,\n              options: chartOptions('Usuarios por país')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 669,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart\",\n            children: /*#__PURE__*/_jsxDEV(Bar, {\n              data: cancionesPorGenero,\n              options: chartOptions('Canciones por género')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 11\n      }, this), !activeButton && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"admin-text\",\n          children: \"Selecciona una opci\\xF3n...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 462,\n    columnNumber: 5\n  }, this);\n}\n_s(Admin, \"CBS23hD7Eo43GVvl1D7YVpLXrCw=\");\n_c = Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useState","useEffect","trash","axios","rightArrow","leftArrow","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","Fragment","_Fragment","server_url","process","env","REACT_APP_SERVER_URL","register","Admin","_s","activeButton","setActiveButton","fetchedSongs","setFetchedSongs","fetchedArtists","setFetchedArtists","songs","setSongs","artists","setArtists","users","setUsers","pageSongs","setPageSongs","pageArtists","setPageArtists","pageUsers","setPageUsers","totalSongs","setTotalSongs","totalArtists","setTotalArtists","totalUsers","setTotalUsers","loading","setLoading","paginationDisabled","setPaginationDisabled","searchTermSongs","setSearchTermSongs","searchTermArtists","setSearchTermArtists","searchTermUsers","setSearchTermUsers","searchTermGenre","setSearchTermGenre","selectedGenre","setSelectedGenre","genres","setGenres","searchTermCountry","setSearchTermCountry","selectedCountry","setSelectedCountry","country","setCountry","usuariosPorPais","setUsuariosPorPais","cancionesPorGenero","setCancionesPorGenero","limit","chartOptions","title","responsive","maintainAspectRatio","plugins","legend","display","position","scales","x","ticks","autoSkip","maxRotation","minRotation","y","beginAtZero","formatFollowers","followers","Intl","NumberFormat","format","formatDuration","durationMs","totalSeconds","Math","round","minutes","floor","seconds","toString","padStart","formatGenres","length","slice","join","pressed","button","prev","fetchSpotifyData","enrichedSongs","Promise","all","map","song","spotify","response","get","encodeURIComponent","withCredentials","parsed","JSON","parse","data","tracks","track","items","err","fetchData","songsResponse","totalSongsResponse","total","error","console","enrichedArtists","artist","name","artistData","artistsResponse","totalArtistsResponse","usersResponse","totalUsersResponse","obtenerCodigoPais","then","res","paisesTraducidos","codigo","traducirCodigoPais","labels","datasets","label","backgroundColor","peticionesUsuarios","pais","peticionesGeneros","genero","resUsuarios","resGeneros","datosUsuarios","datosGeneros","finally","searchArtists","query","params","q","searchSongs","searchUsers","handleSearchArtists","handleSearchSongs","handleSearchSongsGenre","handleSearchUsers","handleSearchUsersContry","handleDeleteSong","id","window","confirm","delete","filter","alert","handleDeleteAdmin","handleDeleteUser","user","codigoIso","regionNames","DisplayNames","type","of","toUpperCase","nombrePais","codigos","i","j","String","fromCharCode","nombre","push","normalizar","str","normalize","replace","toLowerCase","nombreNormalizado","resultado","find","p","renderPagination","currentPage","onPageChange","totalPages","ceil","className","children","disabled","onClick","src","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onKeyDown","key","list","contry","role","imagen","alt","genre","_song$spotify$album$i","album","images","url","duration_ms","_artist$spotify$image","options","_c","$RefreshReg$"],"sources":["D:/Proyectos/Practicas/spotifai/app-web/src/pages/Admin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Admin.css';\r\nimport trash from \"../assets/trash.svg\";\r\nimport axios from \"axios\";\r\nimport rightArrow from \"../assets/rightArrow.svg\"\r\nimport leftArrow from \"../assets/leftArrow.svg\"\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {Chart as ChartJS,CategoryScale,LinearScale,BarElement,Title,Tooltip,Legend} from 'chart.js';\r\n\r\nconst server_url = process.env.REACT_APP_SERVER_URL;\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nexport default function Admin() {\r\n  const [activeButton, setActiveButton] = useState(null);\r\n  const [fetchedSongs, setFetchedSongs] = useState(false);\r\n  const [fetchedArtists, setFetchedArtists] = useState(false);\r\n  const [songs, setSongs] = useState([]);\r\n  const [artists, setArtists] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [pageSongs, setPageSongs] = useState(1);\r\n  const [pageArtists, setPageArtists] = useState(1);\r\n  const [pageUsers, setPageUsers] = useState(1);\r\n  const [totalSongs, setTotalSongs] = useState(0);\r\n  const [totalArtists, setTotalArtists] = useState(0);\r\n  const [totalUsers, setTotalUsers] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [paginationDisabled, setPaginationDisabled] = useState(false);\r\n  const [searchTermSongs, setSearchTermSongs] = useState(\"\");\r\n  const [searchTermArtists, setSearchTermArtists] = useState(\"\");\r\n  const [searchTermUsers, setSearchTermUsers] = useState(\"\");\r\n  const [searchTermGenre, setSearchTermGenre] = useState(\"\");\r\n  const [selectedGenre, setSelectedGenre] = useState(\"\");\r\n  const [genres, setGenres] = useState([]);\r\n  const [searchTermCountry, setSearchTermCountry] = useState(\"\");\r\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n  const [country, setCountry] = useState([]);\r\n  const [usuariosPorPais, setUsuariosPorPais] = useState();\r\n  const [cancionesPorGenero, setCancionesPorGenero] = useState();\r\n  const limit = 10;\r\n\r\n  const chartOptions = (title) => ({\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n        position: 'top',\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n          autoSkip: false,\r\n          maxRotation: 90,\r\n          minRotation: 45,\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  });\r\n\r\n    const formatFollowers = (followers) => {\r\n        return new Intl.NumberFormat().format(followers);\r\n    };\r\n\r\n    const formatDuration = (durationMs) => {\r\n        const totalSeconds = Math.round(durationMs / 1000); // Convertir a segundos\r\n        const minutes = Math.floor(totalSeconds / 60); // Obtener los minutos\r\n        const seconds = totalSeconds % 60; // Obtener los segundos restantes\r\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`; // Formato \"minutos:segundos\"\r\n    };\r\n\r\n    const formatGenres = (genres) => {\r\n    if (!genres || genres.length === 0) {\r\n        return \"Sin géneros\"; // Si no tiene géneros\r\n    }\r\n    \r\n    if (genres.length > 3) {\r\n        return `${genres.slice(0, 3).join(\", \")}...`; // Si tiene más de 3 géneros, mostrar los 3 primeros y '...'\r\n    }\r\n\r\n    return genres.join(\", \"); // Si tiene 3 o menos géneros, mostramos todos\r\n};\r\n\r\n  const pressed = (button) => {\r\n    setActiveButton(prev => (prev === button ? null : button));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchSpotifyData = async () => {\r\n      setLoading(true); // Inicia el loading mientras enriquecemos las canciones con datos de Spotify\r\n\r\n      const enrichedSongs = await Promise.all(songs.map(async (song) => {\r\n        if (!song.spotify) { // Verificamos si la canción ya tiene datos de Spotify\r\n          try {\r\n            const response = await axios.get(`${server_url}/get/songInfo?songName=${encodeURIComponent(song.title)}`, {\r\n              withCredentials: true\r\n            });\r\n            const parsed = JSON.parse(response.data.tracks);\r\n            const track = parsed.tracks.items[0];\r\n            return { ...song, spotify: track };\r\n          } catch (err) {\r\n            return { ...song, spotify: null };\r\n          }\r\n        }\r\n        return song; // Si ya tiene datos de Spotify, la retornamos tal cual\r\n      }));\r\n        setLoading(false); \r\n        setSongs(enrichedSongs);\r\n        setFetchedSongs(false)\r\n    };\r\n\r\n    if (activeButton === \"songs\" && fetchedSongs) {\r\n        fetchSpotifyData();\r\n    }\r\n  }, [fetchedSongs]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"songs\") {\r\n        try {\r\n          let songsResponse\r\n          let totalSongsResponse\r\n          if (selectedGenre === \"\") {\r\n            songsResponse = await axios.get(`${server_url}/api/get/songs?page=${pageSongs}&limit=${limit}`);\r\n            totalSongsResponse = await axios.get(`${server_url}/api/get/songs/count`);\r\n          } else {\r\n            songsResponse = await axios.get(`${server_url}/api/get/songs/${selectedGenre}?page=${pageSongs}&limit=${limit}`);\r\n            totalSongsResponse = await axios.get(`${server_url}/api/get/songs/count?genre=${selectedGenre}`);\r\n          }\r\n          setSongs(songsResponse.data);\r\n          setTotalSongs(totalSongsResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching songs data:', error);\r\n        }\r\n      }\r\n        setFetchedSongs(true);\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"songs\" && !paginationDisabled) {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageSongs, paginationDisabled, selectedGenre]);\r\n\r\n  useEffect(() => {\r\n    const fetchSpotifyData = async () => {\r\n        setLoading(true); // Inicia el loading mientras enriquecemos los artistas con datos de Spotify\r\n        const enrichedArtists = await Promise.all(artists.map(async (artist) => {\r\n        if (!artist.spotify) { // Verificamos si el artista ya tiene datos de Spotify\r\n            try {\r\n            const response = await axios.get(`${server_url}/get/artistInfo?artistName=${encodeURIComponent(artist.name)}`, {\r\n                withCredentials: true\r\n            });\r\n            const artistData = response.data;\r\n            return { ...artist, spotify: artistData };\r\n            } catch (err) {\r\n            return { ...artist, spotify: null }; // Si hay un error, retornamos el artista sin datos de Spotify\r\n            }\r\n        }\r\n        return artist; // Si ya tiene datos de Spotify, lo retornamos tal cual\r\n        }));\r\n\r\n        setLoading(false);\r\n        setArtists(enrichedArtists); // Actualizamos el estado con los artistas enriquecidos\r\n        setFetchedArtists(false);\r\n    };\r\n\r\n    if (activeButton === \"artists\" && fetchedArtists) {\r\n        fetchSpotifyData();\r\n    }\r\n    }, [fetchedArtists]); // El efecto se ejecutará cuando 'fetchedArtists' cambie\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"artists\") {\r\n        try {\r\n          const artistsResponse = await axios.get(`${server_url}/api/get/artists?page=${pageArtists}&limit=${limit}`);\r\n          const totalArtistsResponse = await axios.get(`${server_url}/api/get/artists/count`);\r\n          setArtists(artistsResponse.data);\r\n          setTotalArtists(totalArtistsResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching artists data:', error);\r\n        }\r\n      }\r\n\r\n        setFetchedArtists(true);\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"artists\" && !paginationDisabled) {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageArtists, paginationDisabled]);\r\n\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"users\") {\r\n        try {\r\n          let usersResponse;\r\n          let totalUsersResponse;\r\n          if (selectedCountry === \"\") {\r\n            usersResponse = await axios.get(`${server_url}/api/get/users?page=${pageUsers}&limit=${limit}`);\r\n            totalUsersResponse = await axios.get(`${server_url}/api/get/users/count`);\r\n          } else {\r\n            usersResponse = await axios.get(`${server_url}/api/get/users/${obtenerCodigoPais(selectedCountry)}?page=${pageUsers}&limit=${limit}`);\r\n            totalUsersResponse = await axios.get(`${server_url}/api/get/users/count?pais=${obtenerCodigoPais(selectedCountry)}`);\r\n          }\r\n          setUsers(usersResponse.data);\r\n          setTotalUsers(totalUsersResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching artists data:', error);\r\n        }\r\n      }\r\n\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"users\" && !paginationDisabled) {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageUsers, paginationDisabled, selectedCountry]);\r\n\r\n  useEffect(() => {\r\n    axios.get(server_url+\"/api/get/genres\").then(res => {\r\n      setGenres(res.data)\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios.get(server_url+\"/api/get/paises\").then(res => {\r\n      const paisesTraducidos = res.data.map(codigo => traducirCodigoPais(codigo));\r\n      setCountry(paisesTraducidos);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setUsuariosPorPais({\r\n    labels: country,\r\n    datasets: [\r\n      {\r\n        label: 'Usuarios',\r\n        data: [10, 5, 7],\r\n        backgroundColor: ['#4CAF50', '#2196F3', '#FF9800'],\r\n      },\r\n    ],\r\n  });\r\n\r\n  setCancionesPorGenero({\r\n    labels: genres,\r\n    datasets: [\r\n      {\r\n        label: 'Canciones',\r\n        data: [20, 15, 25, 10, 20, 15, 25, 10, 20, 15, 25, 10, 20, 15, 25, 10, 20, 15, 25, 10],\r\n        backgroundColor: ['#9C27B0', '#E91E63', '#FFC107', '#00BCD4'],\r\n      },\r\n    ],\r\n  })\r\n  }, [genres, country])\r\n\r\n  useEffect(() => {\r\n    if (activeButton === \"graphs\") {\r\n      setLoading(true);\r\n\r\n      const peticionesUsuarios = country.map((pais) =>\r\n        axios.get(`${server_url}/api/get/users/count?pais=${obtenerCodigoPais(pais)}`)\r\n      );\r\n\r\n      const peticionesGeneros = genres.map((genero) =>\r\n        axios.get(`${server_url}/api/get/songs/count?genre=${genero}`)\r\n      );\r\n\r\n      Promise.all([\r\n        Promise.all(peticionesUsuarios),\r\n        Promise.all(peticionesGeneros)\r\n      ])\r\n        .then(([resUsuarios, resGeneros]) => {\r\n          const datosUsuarios = resUsuarios.map((res) => res.data.total);\r\n          const datosGeneros = resGeneros.map((res) => res.data.total);\r\n\r\n          setUsuariosPorPais({\r\n            labels: country,\r\n            datasets: [\r\n              {\r\n                label: 'Usuarios',\r\n                data: datosUsuarios,\r\n                backgroundColor: ['#4CAF50', '#2196F3', '#FF9800'],\r\n              },\r\n            ],\r\n          });\r\n\r\n          setCancionesPorGenero({\r\n            labels: genres,\r\n            datasets: [\r\n              {\r\n                label: 'Canciones',\r\n                data: datosGeneros,\r\n                backgroundColor: ['#9C27B0', '#E91E63', '#FFC107', '#00BCD4'],\r\n              },\r\n            ],\r\n          });\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, [activeButton, country, genres]);\r\n\r\n\r\n  const searchArtists = async (query) => {\r\n        try {\r\n            const response = await axios.get(`/api/search/artists`, {\r\n            params: { q: query },\r\n            });\r\n            setArtists(response.data)\r\n            setFetchedArtists(true)\r\n        } catch (error) {\r\n            console.error('Error al buscar artistas:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const searchSongs = async (query) => {\r\n        try {\r\n            const response = await axios.get(server_url+`/api/search/songs`, {\r\n            params: { q: query },\r\n            });\r\n            setSongs(response.data)\r\n            setFetchedSongs(true)\r\n        } catch (error) {\r\n            console.error('Error al buscar canciones:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const searchUsers = async (query) => {\r\n        try {\r\n            const response = await axios.get(server_url+`/api/search/users`, {\r\n            params: { q: query },\r\n            });\r\n            setUsers(response.data)\r\n        } catch (error) {\r\n            console.error('Error al buscar canciones:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const handleSearchArtists = () => {\r\n        if (searchTermArtists === \"\"){\r\n            setPaginationDisabled(false)\r\n        } else {\r\n            searchArtists(searchTermArtists)\r\n            setPaginationDisabled(true)\r\n        }\r\n    }\r\n\r\n    const handleSearchSongs = () => {\r\n        if (searchTermSongs === \"\"){\r\n            setPaginationDisabled(false)\r\n        } else {\r\n            searchSongs(searchTermSongs)\r\n            setPaginationDisabled(true)\r\n        }\r\n    }\r\n\r\n    const handleSearchSongsGenre = () => {\r\n      setSelectedGenre(searchTermGenre)\r\n    }\r\n\r\n    const handleSearchUsers = () => {\r\n        if (searchTermUsers === \"\"){\r\n            setPaginationDisabled(false)\r\n        } else {\r\n            searchUsers(searchTermUsers)\r\n            setPaginationDisabled(true)\r\n        }\r\n    }\r\n\r\n    const handleSearchUsersContry = () => {\r\n      setSelectedCountry(searchTermCountry)\r\n    }\r\n\r\n    const handleDeleteSong = async (id) => {\r\n      if (!window.confirm(\"¿Estás seguro de que quieres eliminar esta canción?\")) return;\r\n      try {\r\n        await axios.delete(server_url+`/api/delete/song/${id}`);\r\n        setSongs((prev) => prev.filter((song) => song.id !== id));\r\n      } catch (err) {\r\n        console.error(\"Error al eliminar canción:\", err);\r\n        alert(\"Error al eliminar la canción.\");\r\n      }\r\n  };\r\n\r\n  const handleDeleteAdmin = async (id) => {\r\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este artista?\")) return;\r\n      try {\r\n        await axios.delete(server_url+`/api/delete/artists/${id}`);\r\n        setArtists((prev) => prev.filter((artist) => artist.id !== id));\r\n      } catch (err) {\r\n        console.error(\"Error al eliminar el artista:\", err);\r\n        alert(\"Error al eliminar la artista.\");\r\n      }\r\n  };\r\n\r\n  const handleDeleteUser = async (id) => {\r\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este usuario?\")) return;\r\n      try {\r\n        await axios.delete(server_url+`/api/delete/users/${id}`);\r\n        setUsers((prev) => prev.filter((user) => user.id !== id));\r\n      } catch (err) {\r\n        console.error(\"Error al eliminar el Usuario:\", err);\r\n        alert(\"Error al eliminar la artista.\");\r\n      }\r\n  };\r\n\r\n  function traducirCodigoPais(codigoIso) {\r\n    const regionNames = new Intl.DisplayNames(['es'], { type: 'region' });\r\n    return regionNames.of(codigoIso.toUpperCase());\r\n  }\r\n\r\n  function obtenerCodigoPais(nombrePais) {\r\n    const regionNames = new Intl.DisplayNames(['es'], { type: 'region' });\r\n    const codigos = [];\r\n    for (let i = 65; i <= 90; i++) {\r\n      for (let j = 65; j <= 90; j++) {\r\n        const codigo = String.fromCharCode(i) + String.fromCharCode(j);\r\n        const nombre = regionNames.of(codigo);\r\n        if (nombre) {\r\n          codigos.push({ codigo, nombre });\r\n        }\r\n      }\r\n    }\r\n    const normalizar = str => str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n    const nombreNormalizado = normalizar(nombrePais);\r\n\r\n    const resultado = codigos.find(p => normalizar(p.nombre) === nombreNormalizado);\r\n    return resultado ? resultado.codigo : null;\r\n  }\r\n\r\n  const renderPagination = (currentPage, total, onPageChange) => {\r\n    const totalPages = Math.ceil(total / limit);\r\n    return (\r\n      <div className=\"pagination\">\r\n        <button className='pagination-button' disabled={currentPage === 1 || paginationDisabled} onClick={() => onPageChange(currentPage - 1)}><img src={leftArrow}></img></button>\r\n        <span className='pagination-text'>Página {currentPage} de {totalPages}</span>\r\n        <button className='pagination-button' disabled={currentPage === totalPages || paginationDisabled} onClick={() => onPageChange(currentPage + 1)}><img src={rightArrow}></img></button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-container\">\r\n      <aside className=\"sidebar\">\r\n        <button\r\n          onClick={() => pressed(\"users\")}\r\n          className={`sidebar-btn ${activeButton === \"users\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Usuarios\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"songs\")}\r\n          className={`sidebar-btn ${activeButton === \"songs\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Canciones\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"artists\")}\r\n          className={`sidebar-btn ${activeButton === \"artists\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Artistas\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"graphs\")}\r\n          className={`sidebar-btn ${activeButton === \"graphs\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Gráficos\r\n        </button>\r\n      </aside>\r\n\r\n      <main className=\"main-content\">\r\n        <h2 className=\"admin-header\">Panel de admin</h2>\r\n\r\n        {activeButton === \"users\" && (\r\n          <div className=\"admin-table\">\r\n            <div className=\"input-container\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar usuarios...\"\r\n                className=\"admin-input\"\r\n                value={searchTermUsers}\r\n                onChange={(e) => setSearchTermUsers(e.target.value)}\r\n                onKeyDown={(e) => {\r\n                    if (e.key === \"Enter\"){\r\n                        handleSearchUsers()\r\n                    }\r\n                }}\r\n              />\r\n            <input\r\n              list=\"country-options\"\r\n              placeholder=\"Filtrar por pais...\"\r\n              className=\"admin-input\"\r\n              value={searchTermCountry}\r\n              onChange={(e) => setSearchTermCountry(e.target.value)}\r\n              onKeyDown={(e) => {\r\n                if (e.key === \"Enter\") {\r\n                  handleSearchUsersContry();\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n          <datalist id=\"country-options\">\r\n            {country.map((contry, i) => (\r\n              <option key={i} value={contry} />\r\n            ))}\r\n          </datalist>\r\n            {loading ? (\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                <span className=\"sr-only\"></span>\r\n                </div>\r\n              </div>\r\n              ) : (\r\n                users.map((user, i) => (\r\n                  <div className=\"admin-row\" key={i}>\r\n                    <img src={user.imagen} alt=\"Cover\" className='row-img'/>\r\n                    <h3 className=\"row-name\">{user.name}</h3>\r\n                    <p className=\"row-info\">Pais: {traducirCodigoPais(user.pais)}</p>\r\n                    <p className=\"row-info\">Id: {user.id}</p>\r\n                    <button onClick={() => handleDeleteUser(user.id)} className=\"row-trash\">\r\n                      <img src={trash} alt=\"Eliminar\" />\r\n                    </button>\r\n                  </div>\r\n                ))\r\n              )}\r\n            {renderPagination(pageUsers, totalUsers, setPageUsers)}\r\n          </div>\r\n        )}\r\n\r\n        {activeButton === \"songs\" && (\r\n        <div className=\"admin-table\">\r\n          <div className=\"input-container\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Buscar canciones...\"\r\n              className=\"admin-input\"\r\n              value={searchTermSongs}\r\n              onChange={(e) => setSearchTermSongs(e.target.value)}\r\n              onKeyDown={(e) => {\r\n                if (e.key === \"Enter\") {\r\n                  handleSearchSongs();\r\n                }\r\n              }}\r\n            />\r\n            <input\r\n              list=\"genre-options\"\r\n              placeholder=\"Filtrar por género...\"\r\n              className=\"admin-input\"\r\n              value={searchTermGenre}\r\n              onChange={(e) => setSearchTermGenre(e.target.value)}\r\n              onKeyDown={(e) => {\r\n                if (e.key === \"Enter\") {\r\n                  handleSearchSongsGenre();\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n          <datalist id=\"genre-options\">\r\n            {genres.map((genre, i) => (\r\n              <option key={i} value={genre} />\r\n            ))}\r\n          </datalist>\r\n          {loading ? (\r\n            <div className=\"d-flex justify-content-center align-items-center\">\r\n              <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                <span className=\"sr-only\"></span>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            songs.map((song, i) => (\r\n              <div className=\"admin-row\" key={i}>\r\n                {song.spotify ? (\r\n                  <>\r\n                    <img\r\n                      src={song.spotify.album.images[0]?.url}\r\n                      alt=\"Cover\"\r\n                      className=\"row-img\"\r\n                    />\r\n                    <h3 className=\"row-name\">{song.title}</h3>\r\n                    <p className=\"row-info\">Álbum: {song.spotify.album.name}</p>\r\n                    <p className=\"row-info\">Duración: {formatDuration(song.spotify.duration_ms)}</p>\r\n                    <button\r\n                      onClick={() => handleDeleteSong(song.spotify.id)}\r\n                      className=\"row-trash\"\r\n                    >\r\n                      <img src={trash} alt=\"Eliminar\" />\r\n                    </button>\r\n                  </>\r\n                ) : (\r\n                  <h3 className=\"row-name\">{song.title}</h3> // Solo muestra el nombre si no hay información de Spotify\r\n                )}\r\n              </div>\r\n            ))\r\n          )}\r\n          {renderPagination(pageSongs, totalSongs, setPageSongs)}\r\n        </div>\r\n      )}\r\n\r\n        {activeButton === \"artists\" && (\r\n            <div className=\"admin-table\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Buscar artistas...\"\r\n                    className=\"admin-input\"\r\n                    value={searchTermArtists}\r\n                    onChange={(e) => setSearchTermArtists(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\"){\r\n                            handleSearchArtists()\r\n                        }\r\n                    }}\r\n                />\r\n                {loading ? (\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                artists.map((artist, i) => (\r\n                    <div className=\"admin-row\" key={i}>\r\n                    {artist.spotify ? (\r\n                        <>\r\n                        <img\r\n                            src={artist.spotify.images[0]?.url || 'https://via.placeholder.com/50'}\r\n                            alt={artist.name}\r\n                            className='row-img'\r\n                        />\r\n                        <h3 className=\"row-name\">{artist.spotify.name}</h3>\r\n                        <p className=\"row-info\">Géneros: {formatGenres(artist.spotify.genres)}</p>\r\n                        <p className=\"row-info\">Seguidores: {formatFollowers(artist.spotify.followers)}</p>\r\n                        <button onClick={() => {handleDeleteAdmin(artist.id)}} className=\"row-trash\">\r\n                            <img src={trash} alt=\"Eliminar\" />\r\n                        </button>\r\n                        </>\r\n                    ) : (\r\n                        <h3 className=\"row-name\">{artist.name}</h3> // Solo muestra el nombre si no hay información de Spotify\r\n                    )}\r\n                    </div>\r\n                ))\r\n                )}\r\n                {renderPagination(pageArtists, totalArtists, setPageArtists)}\r\n            </div>\r\n            )}\r\n\r\n        {activeButton === \"graphs\" && (\r\n          <div className=\"admin-table\">\r\n          <p className=\"admin-text\">Mostrando gráficos...</p>\r\n          <div className=\"charts-container\">\r\n            <div className=\"chart\">\r\n              <Bar data={usuariosPorPais} options={chartOptions('Usuarios por país')} />\r\n            </div>\r\n            <div className=\"chart\">\r\n              <Bar data={cancionesPorGenero} options={chartOptions('Canciones por género')} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        )}\r\n\r\n        {!activeButton && (\r\n          <div className=\"admin-table\">\r\n            <p className='admin-text'>Selecciona una opción...</p>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}