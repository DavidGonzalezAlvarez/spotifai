{"ast":null,"code":"var _jsxFileName = \"D:\\\\Proyectos\\\\Practicas\\\\spotifai\\\\app-web\\\\src\\\\pages\\\\Admin.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Admin.css';\nimport trash from \"../assets/trash.svg\";\nimport axios from \"axios\";\nimport rightArrow from \"../assets/rightArrow.svg\";\nimport leftArrow from \"../assets/leftArrow.svg\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst server_url = process.env.REACT_APP_SERVER_URL;\nexport default function Admin() {\n  _s();\n  const [activeButton, setActiveButton] = useState(null);\n  const [fetchedSongs, setFetchedSongs] = useState(false);\n  const [fetchedArtists, setFetchedArtists] = useState(false);\n  const [songs, setSongs] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [pageSongs, setPageSongs] = useState(1);\n  const [pageArtists, setPageArtists] = useState(1);\n  const [pageUsers, setPageUsers] = useState(1);\n  const [totalSongs, setTotalSongs] = useState(0);\n  const [totalArtists, setTotalArtists] = useState(0);\n  const [totalUsers, setTotalUsers] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [paginationDisabled, setPaginationDisabled] = useState(false);\n  const [searchTermSongs, setSearchTermSongs] = useState(\"\");\n  const [searchTermArtists, setSearchTermArtists] = useState(\"\");\n  const [searchTermUsers, setSearchTermUsers] = useState(\"\");\n  const limit = 10;\n  const formatFollowers = followers => {\n    return new Intl.NumberFormat().format(followers);\n  };\n  const formatDuration = durationMs => {\n    const totalSeconds = Math.round(durationMs / 1000); // Convertir a segundos\n    const minutes = Math.floor(totalSeconds / 60); // Obtener los minutos\n    const seconds = totalSeconds % 60; // Obtener los segundos restantes\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`; // Formato \"minutos:segundos\"\n  };\n  const formatGenres = genres => {\n    if (!genres || genres.length === 0) {\n      return \"Sin géneros\"; // Si no tiene géneros\n    }\n    if (genres.length > 3) {\n      return `${genres.slice(0, 3).join(\", \")}...`; // Si tiene más de 3 géneros, mostrar los 3 primeros y '...'\n    }\n    return genres.join(\", \"); // Si tiene 3 o menos géneros, mostramos todos\n  };\n  const pressed = button => {\n    setActiveButton(prev => prev === button ? null : button);\n  };\n  useEffect(() => {\n    const fetchSpotifyData = async () => {\n      setLoading(true); // Inicia el loading mientras enriquecemos las canciones con datos de Spotify\n\n      const enrichedSongs = await Promise.all(songs.map(async song => {\n        if (!song.spotify) {\n          // Verificamos si la canción ya tiene datos de Spotify\n          try {\n            const response = await axios.get(`${server_url}/get/songInfo?songName=${encodeURIComponent(song.title)}`, {\n              withCredentials: true\n            });\n            const parsed = JSON.parse(response.data.tracks);\n            const track = parsed.tracks.items[0];\n            return {\n              ...song,\n              spotify: track\n            };\n          } catch (err) {\n            return {\n              ...song,\n              spotify: null\n            };\n          }\n        }\n        return song; // Si ya tiene datos de Spotify, la retornamos tal cual\n      }));\n      setLoading(false);\n      setSongs(enrichedSongs);\n      setFetchedSongs(false);\n    };\n    if (activeButton === \"songs\" && fetchedSongs) {\n      fetchSpotifyData();\n    }\n  }, [fetchedSongs]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"songs\") {\n        try {\n          const songsResponse = await axios.get(`${server_url}/api/get/songs?page=${pageSongs}&limit=${limit}`);\n          const totalSongsResponse = await axios.get(`${server_url}/api/get/songs/count`);\n          setSongs(songsResponse.data);\n          setTotalSongs(totalSongsResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching songs data:', error);\n        }\n      }\n      setFetchedSongs(true);\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"songs\" && !paginationDisabled) {\n      fetchData();\n    }\n  }, [activeButton, pageSongs, paginationDisabled]);\n  useEffect(() => {\n    const fetchSpotifyData = async () => {\n      setLoading(true); // Inicia el loading mientras enriquecemos los artistas con datos de Spotify\n      const enrichedArtists = await Promise.all(artists.map(async artist => {\n        if (!artist.spotify) {\n          // Verificamos si el artista ya tiene datos de Spotify\n          try {\n            const response = await axios.get(`${server_url}/get/artistInfo?artistName=${encodeURIComponent(artist.name)}`, {\n              withCredentials: true\n            });\n            const artistData = response.data;\n            return {\n              ...artist,\n              spotify: artistData\n            };\n          } catch (err) {\n            return {\n              ...artist,\n              spotify: null\n            }; // Si hay un error, retornamos el artista sin datos de Spotify\n          }\n        }\n        return artist; // Si ya tiene datos de Spotify, lo retornamos tal cual\n      }));\n      setLoading(false);\n      setArtists(enrichedArtists); // Actualizamos el estado con los artistas enriquecidos\n      setFetchedArtists(false);\n    };\n    if (activeButton === \"artists\" && fetchedArtists) {\n      fetchSpotifyData();\n    }\n  }, [fetchedArtists]); // El efecto se ejecutará cuando 'fetchedArtists' cambie\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"artists\") {\n        try {\n          const artistsResponse = await axios.get(`${server_url}/api/get/artists?page=${pageArtists}&limit=${limit}`);\n          const totalArtistsResponse = await axios.get(`${server_url}/api/get/artists/count`);\n          setArtists(artistsResponse.data);\n          setTotalArtists(totalArtistsResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching artists data:', error);\n        }\n      }\n      setFetchedArtists(true);\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"artists\" && !paginationDisabled) {\n      fetchData();\n    }\n  }, [activeButton, pageArtists, paginationDisabled]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"users\") {\n        try {\n          const usersResponse = await axios.get(`${server_url}/api/get/users?page=${pageUsers}&limit=${limit}`);\n          const totalUsersResponse = await axios.get(`${server_url}/api/get/users/count`);\n          setUsers(usersResponse.data);\n          console.log(usersResponse.data);\n          setTotalUsers(totalUsersResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching artists data:', error);\n        }\n      }\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"users\" && !paginationDisabled) {\n      fetchData();\n    }\n  }, [activeButton, pageUsers, paginationDisabled]);\n  const searchArtists = async query => {\n    try {\n      const response = await axios.get(`/api/search/artists`, {\n        params: {\n          q: query\n        }\n      });\n      setArtists(response.data);\n      setFetchedArtists(true);\n    } catch (error) {\n      console.error('Error al buscar artistas:', error);\n      return [];\n    }\n  };\n  const searchSongs = async query => {\n    try {\n      const response = await axios.get(server_url + `/api/search/songs`, {\n        params: {\n          q: query\n        }\n      });\n      setSongs(response.data);\n      setFetchedSongs(true);\n    } catch (error) {\n      console.error('Error al buscar canciones:', error);\n      return [];\n    }\n  };\n  const searchUsers = async query => {\n    try {\n      const response = await axios.get(server_url + `/api/search/users`, {\n        params: {\n          q: query\n        }\n      });\n      console.log(response.data);\n      setUsers(response.data);\n    } catch (error) {\n      console.error('Error al buscar canciones:', error);\n      return [];\n    }\n  };\n  const handleSearchArtists = () => {\n    if (searchTermArtists === \"\") {\n      setPaginationDisabled(false);\n    } else {\n      searchArtists(searchTermArtists);\n      setPaginationDisabled(true);\n    }\n  };\n  const handleSearchSongs = () => {\n    if (searchTermSongs === \"\") {\n      setPaginationDisabled(false);\n    } else {\n      searchSongs(searchTermSongs);\n      setPaginationDisabled(true);\n    }\n  };\n  const handleSearchUsers = () => {\n    if (searchTermUsers === \"\") {\n      setPaginationDisabled(false);\n    } else {\n      searchUsers(searchTermUsers);\n      setPaginationDisabled(true);\n    }\n  };\n  const handleDeleteSong = async id => {\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar esta canción?\")) return;\n    try {\n      await axios.delete(server_url + `/api/delete/song/${id}`);\n      setSongs(prev => prev.filter(song => song.id !== id));\n    } catch (err) {\n      console.error(\"Error al eliminar canción:\", err);\n      alert(\"Error al eliminar la canción.\");\n    }\n  };\n  const handleDeleteAdmin = async id => {\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este artista?\")) return;\n    try {\n      await axios.delete(server_url + `/api/delete/artists/${id}`);\n      setArtists(prev => prev.filter(artist => artist.id !== id));\n    } catch (err) {\n      console.error(\"Error al eliminar el artista:\", err);\n      alert(\"Error al eliminar la artista.\");\n    }\n  };\n  const handleDeleteUser = async id => {\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este usuario?\")) return;\n    try {\n      await axios.delete(server_url + `/api/delete/users/${id}`);\n      setUsers(prev => prev.filter(user => user.id !== id));\n    } catch (err) {\n      console.error(\"Error al eliminar el Usuario:\", err);\n      alert(\"Error al eliminar la artista.\");\n    }\n  };\n  function traducirCodigoPais(codigoIso) {\n    const regionNames = new Intl.DisplayNames(['es'], {\n      type: 'region'\n    });\n    return regionNames.of(codigoIso.toUpperCase());\n  }\n  const renderPagination = (currentPage, total, onPageChange) => {\n    const totalPages = Math.ceil(total / limit);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pagination-button\",\n        disabled: currentPage === 1 || paginationDisabled,\n        onClick: () => onPageChange(currentPage - 1),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: leftArrow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 144\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"pagination-text\",\n        children: [\"P\\xE1gina \", currentPage, \" de \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pagination-button\",\n        disabled: currentPage === totalPages || paginationDisabled,\n        onClick: () => onPageChange(currentPage + 1),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: rightArrow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 153\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"users\"),\n        className: `sidebar-btn ${activeButton === \"users\" ? \"pressed\" : \"\"}`,\n        children: \"Usuarios\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"songs\"),\n        className: `sidebar-btn ${activeButton === \"songs\" ? \"pressed\" : \"\"}`,\n        children: \"Canciones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"artists\"),\n        className: `sidebar-btn ${activeButton === \"artists\" ? \"pressed\" : \"\"}`,\n        children: \"Artistas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"graphs\"),\n        className: `sidebar-btn ${activeButton === \"graphs\" ? \"pressed\" : \"\"}`,\n        children: \"Gr\\xE1ficos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"admin-header\",\n        children: \"Panel de admin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), activeButton === \"users\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar usuarios...\",\n          className: \"admin-input\",\n          value: searchTermUsers,\n          onChange: e => setSearchTermUsers(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleSearchUsers();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 17\n        }, this) : users.map((user, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"admin-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: user.imagen,\n            alt: \"Cover\",\n            className: \"row-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"row-name\",\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"row-info\",\n            children: [\"Pais: \", traducirCodigoPais(user.pais)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"row-info\",\n            children: [\"Id: \", user.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteUser(user.id),\n            className: \"row-trash\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: trash,\n              alt: \"Eliminar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 25\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 21\n        }, this)), renderPagination(pageUsers, totalUsers, setPageUsers)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this), activeButton === \"songs\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar canciones...\",\n          className: \"admin-input\",\n          value: searchTermSongs,\n          onChange: e => setSearchTermSongs(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleSearchSongs();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 17\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 17\n        }, this) : songs.map((song, i) => {\n          var _song$spotify$album$i;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-row\",\n            children: song.spotify ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: (_song$spotify$album$i = song.spotify.album.images[0]) === null || _song$spotify$album$i === void 0 ? void 0 : _song$spotify$album$i.url,\n                alt: \"Cover\",\n                className: \"row-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"row-name\",\n                children: song.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"\\xC1lbum: \", song.spotify.album.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"Duraci\\xF3n: \", formatDuration(song.spotify.duration_ms)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteSong(song.spotify.id),\n                className: \"row-trash\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: trash,\n                  alt: \"Eliminar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"row-name\",\n              children: song.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 25\n            }, this) // Solo muestra el nombre si no hay información de Spotify\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 21\n          }, this);\n        }), renderPagination(pageSongs, totalSongs, setPageSongs)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 13\n      }, this), activeButton === \"artists\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar artistas...\",\n          className: \"admin-input\",\n          value: searchTermArtists,\n          onChange: e => setSearchTermArtists(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleSearchArtists();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 17\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 17\n        }, this) : artists.map((artist, i) => {\n          var _artist$spotify$image;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-row\",\n            children: artist.spotify ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: ((_artist$spotify$image = artist.spotify.images[0]) === null || _artist$spotify$image === void 0 ? void 0 : _artist$spotify$image.url) || 'https://via.placeholder.com/50',\n                alt: artist.name,\n                className: \"row-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"row-name\",\n                children: artist.spotify.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"G\\xE9neros: \", formatGenres(artist.spotify.genres)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"Seguidores: \", formatFollowers(artist.spotify.followers)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  handleDeleteAdmin(artist.id);\n                },\n                className: \"row-trash\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: trash,\n                  alt: \"Eliminar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"row-name\",\n              children: artist.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 25\n            }, this) // Solo muestra el nombre si no hay información de Spotify\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 21\n          }, this);\n        }), renderPagination(pageArtists, totalArtists, setPageArtists)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 13\n      }, this), activeButton === \"graphs\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"admin-text\",\n          children: \"Mostrando gr\\xE1ficos...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }, this), !activeButton && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"admin-text\",\n          children: \"Selecciona una opci\\xF3n...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n}\n_s(Admin, \"0cTU/TXNXg/35az8AURJCZN0ajY=\");\n_c = Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useState","useEffect","trash","axios","rightArrow","leftArrow","jsxDEV","_jsxDEV","Fragment","_Fragment","server_url","process","env","REACT_APP_SERVER_URL","Admin","_s","activeButton","setActiveButton","fetchedSongs","setFetchedSongs","fetchedArtists","setFetchedArtists","songs","setSongs","artists","setArtists","users","setUsers","pageSongs","setPageSongs","pageArtists","setPageArtists","pageUsers","setPageUsers","totalSongs","setTotalSongs","totalArtists","setTotalArtists","totalUsers","setTotalUsers","loading","setLoading","paginationDisabled","setPaginationDisabled","searchTermSongs","setSearchTermSongs","searchTermArtists","setSearchTermArtists","searchTermUsers","setSearchTermUsers","limit","formatFollowers","followers","Intl","NumberFormat","format","formatDuration","durationMs","totalSeconds","Math","round","minutes","floor","seconds","toString","padStart","formatGenres","genres","length","slice","join","pressed","button","prev","fetchSpotifyData","enrichedSongs","Promise","all","map","song","spotify","response","get","encodeURIComponent","title","withCredentials","parsed","JSON","parse","data","tracks","track","items","err","fetchData","songsResponse","totalSongsResponse","total","error","console","enrichedArtists","artist","name","artistData","artistsResponse","totalArtistsResponse","usersResponse","totalUsersResponse","log","searchArtists","query","params","q","searchSongs","searchUsers","handleSearchArtists","handleSearchSongs","handleSearchUsers","handleDeleteSong","id","window","confirm","delete","filter","alert","handleDeleteAdmin","handleDeleteUser","user","traducirCodigoPais","codigoIso","regionNames","DisplayNames","type","of","toUpperCase","renderPagination","currentPage","onPageChange","totalPages","ceil","className","children","disabled","onClick","src","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onKeyDown","key","role","i","imagen","alt","pais","_song$spotify$album$i","album","images","url","duration_ms","_artist$spotify$image","_c","$RefreshReg$"],"sources":["D:/Proyectos/Practicas/spotifai/app-web/src/pages/Admin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Admin.css';\r\nimport trash from \"../assets/trash.svg\";\r\nimport axios from \"axios\";\r\nimport rightArrow from \"../assets/rightArrow.svg\"\r\nimport leftArrow from \"../assets/leftArrow.svg\"\r\n\r\nconst server_url = process.env.REACT_APP_SERVER_URL;\r\n\r\nexport default function Admin() {\r\n  const [activeButton, setActiveButton] = useState(null);\r\n  const [fetchedSongs, setFetchedSongs] = useState(false);\r\n  const [fetchedArtists, setFetchedArtists] = useState(false);\r\n  const [songs, setSongs] = useState([]);\r\n  const [artists, setArtists] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [pageSongs, setPageSongs] = useState(1);\r\n  const [pageArtists, setPageArtists] = useState(1);\r\n  const [pageUsers, setPageUsers] = useState(1);\r\n  const [totalSongs, setTotalSongs] = useState(0);\r\n  const [totalArtists, setTotalArtists] = useState(0);\r\n  const [totalUsers, setTotalUsers] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [paginationDisabled, setPaginationDisabled] = useState(false);\r\n  const [searchTermSongs, setSearchTermSongs] = useState(\"\");\r\n  const [searchTermArtists, setSearchTermArtists] = useState(\"\");\r\n  const [searchTermUsers, setSearchTermUsers] = useState(\"\");\r\n  const limit = 10;\r\n\r\n    const formatFollowers = (followers) => {\r\n        return new Intl.NumberFormat().format(followers);\r\n    };\r\n\r\n    const formatDuration = (durationMs) => {\r\n        const totalSeconds = Math.round(durationMs / 1000); // Convertir a segundos\r\n        const minutes = Math.floor(totalSeconds / 60); // Obtener los minutos\r\n        const seconds = totalSeconds % 60; // Obtener los segundos restantes\r\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`; // Formato \"minutos:segundos\"\r\n    };\r\n\r\n    const formatGenres = (genres) => {\r\n    if (!genres || genres.length === 0) {\r\n        return \"Sin géneros\"; // Si no tiene géneros\r\n    }\r\n    \r\n    if (genres.length > 3) {\r\n        return `${genres.slice(0, 3).join(\", \")}...`; // Si tiene más de 3 géneros, mostrar los 3 primeros y '...'\r\n    }\r\n\r\n    return genres.join(\", \"); // Si tiene 3 o menos géneros, mostramos todos\r\n};\r\n\r\n  const pressed = (button) => {\r\n    setActiveButton(prev => (prev === button ? null : button));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchSpotifyData = async () => {\r\n      setLoading(true); // Inicia el loading mientras enriquecemos las canciones con datos de Spotify\r\n\r\n      const enrichedSongs = await Promise.all(songs.map(async (song) => {\r\n        if (!song.spotify) { // Verificamos si la canción ya tiene datos de Spotify\r\n          try {\r\n            const response = await axios.get(`${server_url}/get/songInfo?songName=${encodeURIComponent(song.title)}`, {\r\n              withCredentials: true\r\n            });\r\n            const parsed = JSON.parse(response.data.tracks);\r\n            const track = parsed.tracks.items[0];\r\n            return { ...song, spotify: track };\r\n          } catch (err) {\r\n            return { ...song, spotify: null };\r\n          }\r\n        }\r\n        return song; // Si ya tiene datos de Spotify, la retornamos tal cual\r\n      }));\r\n        setLoading(false); \r\n        setSongs(enrichedSongs);\r\n        setFetchedSongs(false)\r\n    };\r\n\r\n    if (activeButton === \"songs\" && fetchedSongs) {\r\n        fetchSpotifyData();\r\n    }\r\n  }, [fetchedSongs]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"songs\") {\r\n        try {\r\n          const songsResponse = await axios.get(`${server_url}/api/get/songs?page=${pageSongs}&limit=${limit}`);\r\n          const totalSongsResponse = await axios.get(`${server_url}/api/get/songs/count`);\r\n          setSongs(songsResponse.data);\r\n          setTotalSongs(totalSongsResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching songs data:', error);\r\n        }\r\n      }\r\n        setFetchedSongs(true);\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"songs\" && !paginationDisabled) {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageSongs, paginationDisabled]);\r\n\r\n  useEffect(() => {\r\n    const fetchSpotifyData = async () => {\r\n        setLoading(true); // Inicia el loading mientras enriquecemos los artistas con datos de Spotify\r\n        const enrichedArtists = await Promise.all(artists.map(async (artist) => {\r\n        if (!artist.spotify) { // Verificamos si el artista ya tiene datos de Spotify\r\n            try {\r\n            const response = await axios.get(`${server_url}/get/artistInfo?artistName=${encodeURIComponent(artist.name)}`, {\r\n                withCredentials: true\r\n            });\r\n            const artistData = response.data;\r\n            return { ...artist, spotify: artistData };\r\n            } catch (err) {\r\n            return { ...artist, spotify: null }; // Si hay un error, retornamos el artista sin datos de Spotify\r\n            }\r\n        }\r\n        return artist; // Si ya tiene datos de Spotify, lo retornamos tal cual\r\n        }));\r\n\r\n        setLoading(false);\r\n        setArtists(enrichedArtists); // Actualizamos el estado con los artistas enriquecidos\r\n        setFetchedArtists(false);\r\n    };\r\n\r\n    if (activeButton === \"artists\" && fetchedArtists) {\r\n        fetchSpotifyData();\r\n    }\r\n    }, [fetchedArtists]); // El efecto se ejecutará cuando 'fetchedArtists' cambie\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"artists\") {\r\n        try {\r\n          const artistsResponse = await axios.get(`${server_url}/api/get/artists?page=${pageArtists}&limit=${limit}`);\r\n          const totalArtistsResponse = await axios.get(`${server_url}/api/get/artists/count`);\r\n          setArtists(artistsResponse.data);\r\n          setTotalArtists(totalArtistsResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching artists data:', error);\r\n        }\r\n      }\r\n\r\n        setFetchedArtists(true);\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"artists\" && !paginationDisabled) {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageArtists, paginationDisabled]);\r\n\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"users\") {\r\n        try {\r\n          const usersResponse = await axios.get(`${server_url}/api/get/users?page=${pageUsers}&limit=${limit}`);\r\n          const totalUsersResponse = await axios.get(`${server_url}/api/get/users/count`);\r\n          setUsers(usersResponse.data);\r\n          console.log(usersResponse.data);\r\n          setTotalUsers(totalUsersResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching artists data:', error);\r\n        }\r\n      }\r\n\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"users\" && !paginationDisabled) {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageUsers, paginationDisabled]);\r\n\r\n  const searchArtists = async (query) => {\r\n        try {\r\n            const response = await axios.get(`/api/search/artists`, {\r\n            params: { q: query },\r\n            });\r\n            setArtists(response.data)\r\n            setFetchedArtists(true)\r\n        } catch (error) {\r\n            console.error('Error al buscar artistas:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const searchSongs = async (query) => {\r\n        try {\r\n            const response = await axios.get(server_url+`/api/search/songs`, {\r\n            params: { q: query },\r\n            });\r\n            setSongs(response.data)\r\n            setFetchedSongs(true)\r\n        } catch (error) {\r\n            console.error('Error al buscar canciones:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const searchUsers = async (query) => {\r\n        try {\r\n            const response = await axios.get(server_url+`/api/search/users`, {\r\n            params: { q: query },\r\n            });\r\n            console.log(response.data)\r\n            setUsers(response.data)\r\n        } catch (error) {\r\n            console.error('Error al buscar canciones:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const handleSearchArtists = () => {\r\n        if (searchTermArtists === \"\"){\r\n            setPaginationDisabled(false)\r\n        } else {\r\n            searchArtists(searchTermArtists)\r\n            setPaginationDisabled(true)\r\n        }\r\n    }\r\n\r\n    const handleSearchSongs = () => {\r\n        if (searchTermSongs === \"\"){\r\n            setPaginationDisabled(false)\r\n        } else {\r\n            searchSongs(searchTermSongs)\r\n            setPaginationDisabled(true)\r\n        }\r\n    }\r\n\r\n    const handleSearchUsers = () => {\r\n        if (searchTermUsers === \"\"){\r\n            setPaginationDisabled(false)\r\n        } else {\r\n            searchUsers(searchTermUsers)\r\n            setPaginationDisabled(true)\r\n        }\r\n    }\r\n\r\n    const handleDeleteSong = async (id) => {\r\n      if (!window.confirm(\"¿Estás seguro de que quieres eliminar esta canción?\")) return;\r\n      try {\r\n        await axios.delete(server_url+`/api/delete/song/${id}`);\r\n        setSongs((prev) => prev.filter((song) => song.id !== id));\r\n      } catch (err) {\r\n        console.error(\"Error al eliminar canción:\", err);\r\n        alert(\"Error al eliminar la canción.\");\r\n      }\r\n  };\r\n\r\n  const handleDeleteAdmin = async (id) => {\r\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este artista?\")) return;\r\n      try {\r\n        await axios.delete(server_url+`/api/delete/artists/${id}`);\r\n        setArtists((prev) => prev.filter((artist) => artist.id !== id));\r\n      } catch (err) {\r\n        console.error(\"Error al eliminar el artista:\", err);\r\n        alert(\"Error al eliminar la artista.\");\r\n      }\r\n  };\r\n\r\n  const handleDeleteUser = async (id) => {\r\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este usuario?\")) return;\r\n      try {\r\n        await axios.delete(server_url+`/api/delete/users/${id}`);\r\n        setUsers((prev) => prev.filter((user) => user.id !== id));\r\n      } catch (err) {\r\n        console.error(\"Error al eliminar el Usuario:\", err);\r\n        alert(\"Error al eliminar la artista.\");\r\n      }\r\n  };\r\n\r\n  function traducirCodigoPais(codigoIso) {\r\n  const regionNames = new Intl.DisplayNames(['es'], { type: 'region' });\r\n  return regionNames.of(codigoIso.toUpperCase());\r\n}\r\n\r\n  const renderPagination = (currentPage, total, onPageChange) => {\r\n    const totalPages = Math.ceil(total / limit);\r\n    return (\r\n      <div className=\"pagination\">\r\n        <button className='pagination-button' disabled={currentPage === 1 || paginationDisabled} onClick={() => onPageChange(currentPage - 1)}><img src={leftArrow}></img></button>\r\n        <span className='pagination-text'>Página {currentPage} de {totalPages}</span>\r\n        <button className='pagination-button' disabled={currentPage === totalPages || paginationDisabled} onClick={() => onPageChange(currentPage + 1)}><img src={rightArrow}></img></button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-container\">\r\n      <aside className=\"sidebar\">\r\n        <button\r\n          onClick={() => pressed(\"users\")}\r\n          className={`sidebar-btn ${activeButton === \"users\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Usuarios\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"songs\")}\r\n          className={`sidebar-btn ${activeButton === \"songs\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Canciones\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"artists\")}\r\n          className={`sidebar-btn ${activeButton === \"artists\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Artistas\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"graphs\")}\r\n          className={`sidebar-btn ${activeButton === \"graphs\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Gráficos\r\n        </button>\r\n      </aside>\r\n\r\n      <main className=\"main-content\">\r\n        <h2 className=\"admin-header\">Panel de admin</h2>\r\n\r\n        {activeButton === \"users\" && (\r\n          <div className=\"admin-table\">\r\n            <input\r\n                    type=\"text\"\r\n                    placeholder=\"Buscar usuarios...\"\r\n                    className=\"admin-input\"\r\n                    value={searchTermUsers}\r\n                    onChange={(e) => setSearchTermUsers(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\"){\r\n                            handleSearchUsers()\r\n                        }\r\n                    }}\r\n                />\r\n                {loading ? (\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                users.map((user, i) => (\r\n                    <div className=\"admin-row\" key={i}>\r\n                        <img src={user.imagen} alt=\"Cover\" className='row-img'/>\r\n                        <h3 className=\"row-name\">{user.name}</h3>\r\n                        <p className=\"row-info\">Pais: {traducirCodigoPais(user.pais)}</p>\r\n                        <p className=\"row-info\">Id: {user.id}</p>\r\n                        <button onClick={() => handleDeleteUser(user.id)} className=\"row-trash\">\r\n                            <img src={trash} alt=\"Eliminar\" />\r\n                        </button>\r\n                    </div>\r\n                ))\r\n                )}\r\n                {renderPagination(pageUsers, totalUsers, setPageUsers)}\r\n          </div>\r\n        )}\r\n\r\n        {activeButton === \"songs\" && (\r\n            <div className=\"admin-table\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Buscar canciones...\"\r\n                    className=\"admin-input\"\r\n                    value={searchTermSongs}\r\n                    onChange={(e) => setSearchTermSongs(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\"){\r\n                            handleSearchSongs()\r\n                        }\r\n                    }}\r\n                />\r\n                {loading ? (\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                songs.map((song, i) => (\r\n                    <div className=\"admin-row\" key={i}>\r\n                    {song.spotify ? (\r\n                        <>\r\n                        <img src={song.spotify.album.images[0]?.url} alt=\"Cover\" className='row-img'/>\r\n                        <h3 className=\"row-name\">{song.title}</h3>\r\n                        <p className=\"row-info\">Álbum: {song.spotify.album.name}</p>\r\n                        <p className=\"row-info\">Duración: {formatDuration(song.spotify.duration_ms)}</p>\r\n                        <button onClick={() => handleDeleteSong(song.spotify.id)} className=\"row-trash\">\r\n                            <img src={trash} alt=\"Eliminar\" />\r\n                        </button>\r\n                        </>\r\n                    ) : (\r\n                        <h3 className=\"row-name\">{song.title}</h3> // Solo muestra el nombre si no hay información de Spotify\r\n                    )}\r\n                    </div>\r\n                ))\r\n                )}\r\n                {renderPagination(pageSongs, totalSongs, setPageSongs)}\r\n            </div>\r\n            )}\r\n\r\n        {activeButton === \"artists\" && (\r\n            <div className=\"admin-table\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Buscar artistas...\"\r\n                    className=\"admin-input\"\r\n                    value={searchTermArtists}\r\n                    onChange={(e) => setSearchTermArtists(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\"){\r\n                            handleSearchArtists()\r\n                        }\r\n                    }}\r\n                />\r\n                {loading ? (\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                artists.map((artist, i) => (\r\n                    <div className=\"admin-row\" key={i}>\r\n                    {artist.spotify ? (\r\n                        <>\r\n                        <img\r\n                            src={artist.spotify.images[0]?.url || 'https://via.placeholder.com/50'}\r\n                            alt={artist.name}\r\n                            className='row-img'\r\n                        />\r\n                        <h3 className=\"row-name\">{artist.spotify.name}</h3>\r\n                        <p className=\"row-info\">Géneros: {formatGenres(artist.spotify.genres)}</p>\r\n                        <p className=\"row-info\">Seguidores: {formatFollowers(artist.spotify.followers)}</p>\r\n                        <button onClick={() => {handleDeleteAdmin(artist.id)}} className=\"row-trash\">\r\n                            <img src={trash} alt=\"Eliminar\" />\r\n                        </button>\r\n                        </>\r\n                    ) : (\r\n                        <h3 className=\"row-name\">{artist.name}</h3> // Solo muestra el nombre si no hay información de Spotify\r\n                    )}\r\n                    </div>\r\n                ))\r\n                )}\r\n                {renderPagination(pageArtists, totalArtists, setPageArtists)}\r\n            </div>\r\n            )}\r\n\r\n        {activeButton === \"graphs\" && (\r\n          <div className=\"admin-table\">\r\n            <p className='admin-text'>Mostrando gráficos...</p>\r\n          </div>\r\n        )}\r\n\r\n        {!activeButton && (\r\n          <div className=\"admin-table\">\r\n            <p className='admin-text'>Selecciona una opción...</p>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}