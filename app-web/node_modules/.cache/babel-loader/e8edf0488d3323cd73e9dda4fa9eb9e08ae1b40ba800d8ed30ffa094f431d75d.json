{"ast":null,"code":"var _jsxFileName = \"D:\\\\Proyectos\\\\Practicas\\\\spotifai\\\\app-web\\\\src\\\\pages\\\\Admin.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Admin.css';\nimport trash from \"../assets/trash.svg\";\nimport axios from \"axios\";\nimport rightArrow from \"../assets/rightArrow.svg\";\nimport leftArrow from \"../assets/leftArrow.svg\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst server_url = process.env.REACT_APP_SERVER_URL;\nexport default function Admin() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [activeButton, setActiveButton] = useState(null);\n  const [fetchedSongs, setFetchedSongs] = useState(false);\n  const [fetchedArtists, setFetchedArtists] = useState(false);\n  const [songs, setSongs] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [pageSongs, setPageSongs] = useState(1);\n  const [pageArtists, setPageArtists] = useState(1);\n  const [totalSongs, setTotalSongs] = useState(0);\n  const [totalArtists, setTotalArtists] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [searchTermSongs, setSearchTermSongs] = useState(\"\");\n  const [searchTermArtists, setSearchTermArtists] = useState(\"\");\n  const limit = 10;\n  const formatFollowers = followers => {\n    return new Intl.NumberFormat().format(followers);\n  };\n  const formatDuration = durationMs => {\n    const totalSeconds = Math.round(durationMs / 1000); // Convertir a segundos\n    const minutes = Math.floor(totalSeconds / 60); // Obtener los minutos\n    const seconds = totalSeconds % 60; // Obtener los segundos restantes\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`; // Formato \"minutos:segundos\"\n  };\n  const formatGenres = genres => {\n    if (!genres || genres.length === 0) {\n      return \"Sin géneros\"; // Si no tiene géneros\n    }\n    if (genres.length > 3) {\n      return `${genres.slice(0, 3).join(\", \")}...`; // Si tiene más de 3 géneros, mostrar los 3 primeros y '...'\n    }\n    return genres.join(\", \"); // Si tiene 3 o menos géneros, mostramos todos\n  };\n  const pressed = button => {\n    setActiveButton(prev => prev === button ? null : button);\n  };\n  const searchArtists = async query => {\n    try {\n      const response = await axios.get(`/api/artists/search/artists`, {\n        params: {\n          q: query\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al buscar artistas:', error);\n      return [];\n    }\n  };\n  const searchSongs = async query => {\n    try {\n      const response = await axios.get(`/api/songs/search/songs`, {\n        params: {\n          q: query\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al buscar canciones:', error);\n      return [];\n    }\n  };\n  const SongSearch = () => {\n    _s();\n    const [searchTermSongs, setSearchTermSongs] = useState('');\n    const [songResults, setSongResults] = useState([]);\n    useEffect(() => {\n      const delayDebounce = setTimeout(() => {\n        if (searchTermSongs.trim()) {\n          searchSongs(searchTermSongs).then(setSongResults);\n        } else {\n          setSongResults([]);\n        }\n      }, 300); // Espera 300ms tras dejar de escribir\n\n      return () => clearTimeout(delayDebounce);\n    }, [searchTermSongs]);\n  };\n  _s(SongSearch, \"ehgWvGTIZYgdRGqm4KiN3kUlDuc=\");\n  useEffect(() => {\n    const fetchSpotifyData = async () => {\n      setLoading(true); // Inicia el loading mientras enriquecemos las canciones con datos de Spotify\n\n      const enrichedSongs = await Promise.all(songs.map(async song => {\n        if (!song.spotify) {\n          // Verificamos si la canción ya tiene datos de Spotify\n          try {\n            const response = await axios.get(`${server_url}/get/songInfo?songName=${encodeURIComponent(song.title)}`, {\n              withCredentials: true\n            });\n            const parsed = JSON.parse(response.data.tracks);\n            const track = parsed.tracks.items[0];\n            return {\n              ...song,\n              spotify: track\n            };\n          } catch (err) {\n            return {\n              ...song,\n              spotify: null\n            };\n          }\n        }\n        return song; // Si ya tiene datos de Spotify, la retornamos tal cual\n      }));\n      setLoading(false);\n      setSongs(enrichedSongs);\n      setFetchedSongs(false);\n    };\n    if (activeButton === \"songs\" && fetchedSongs) {\n      fetchSpotifyData();\n    }\n  }, [fetchedSongs]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"songs\") {\n        try {\n          const songsResponse = await axios.get(`${server_url}/api/get/songs?page=${pageSongs}&limit=${limit}`);\n          const totalSongsResponse = await axios.get(`${server_url}/api/get/songs/count`);\n          setSongs(songsResponse.data);\n          setTotalSongs(totalSongsResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching songs data:', error);\n        }\n      }\n      setFetchedSongs(true);\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"songs\") {\n      fetchData();\n    }\n  }, [activeButton, pageSongs]);\n  useEffect(() => {\n    const fetchSpotifyData = async () => {\n      setLoading(true); // Inicia el loading mientras enriquecemos los artistas con datos de Spotify\n      console.log(artists);\n      const enrichedArtists = await Promise.all(artists.map(async artist => {\n        if (!artist.spotify) {\n          // Verificamos si el artista ya tiene datos de Spotify\n          try {\n            const response = await axios.get(`${server_url}/get/artistInfo?artistName=${encodeURIComponent(artist.name)}`, {\n              withCredentials: true\n            });\n            const artistData = response.data;\n            return {\n              ...artist,\n              spotify: artistData\n            };\n          } catch (err) {\n            return {\n              ...artist,\n              spotify: null\n            }; // Si hay un error, retornamos el artista sin datos de Spotify\n          }\n        }\n        return artist; // Si ya tiene datos de Spotify, lo retornamos tal cual\n      }));\n      setLoading(false);\n      setArtists(enrichedArtists); // Actualizamos el estado con los artistas enriquecidos\n      setFetchedArtists(false);\n    };\n    if (activeButton === \"artists\" && fetchedArtists) {\n      fetchSpotifyData();\n    }\n  }, [fetchedArtists]); // El efecto se ejecutará cuando 'fetchedArtists' cambie\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"artists\") {\n        try {\n          const artistsResponse = await axios.get(`${server_url}/api/get/artists?page=${pageArtists}&limit=${limit}`);\n          const totalArtistsResponse = await axios.get(`${server_url}/api/get/artists/count`);\n          setArtists(artistsResponse.data);\n          setTotalArtists(totalArtistsResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching artists data:', error);\n        }\n      }\n      setFetchedArtists(true);\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"artists\") {\n      fetchData();\n    }\n  }, [activeButton, pageArtists]);\n  const renderPagination = (currentPage, total, onPageChange) => {\n    const totalPages = Math.ceil(total / limit);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pagination-button\",\n        disabled: currentPage === 1,\n        onClick: () => onPageChange(currentPage - 1),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: leftArrow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 122\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"pagination-text\",\n        children: [\"P\\xE1gina \", currentPage, \" de \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pagination-button\",\n        disabled: currentPage === totalPages,\n        onClick: () => onPageChange(currentPage + 1),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: rightArrow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 131\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"users\"),\n        className: `sidebar-btn ${activeButton === \"users\" ? \"pressed\" : \"\"}`,\n        children: \"Usuarios\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"songs\"),\n        className: `sidebar-btn ${activeButton === \"songs\" ? \"pressed\" : \"\"}`,\n        children: \"Canciones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"artists\"),\n        className: `sidebar-btn ${activeButton === \"artists\" ? \"pressed\" : \"\"}`,\n        children: \"Artistas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"graphs\"),\n        className: `sidebar-btn ${activeButton === \"graphs\" ? \"pressed\" : \"\"}`,\n        children: \"Gr\\xE1ficos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"admin-header\",\n        children: \"Panel de admin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), activeButton === \"users\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar...\",\n          className: \"admin-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"admin-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://via.placeholder.com/50\",\n            alt: \"Usuario\",\n            className: \"row-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"row-name\",\n            children: \"Nombre del Usuario\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"row-info\",\n            children: \"Descripci\\xF3n breve o rol\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"row-trash\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: trash,\n              alt: \"Eliminar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), activeButton === \"songs\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar canciones...\",\n          className: \"admin-input\",\n          value: searchTermSongs,\n          onChange: e => setSearchTermSongs(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }, this) : songs.map((song, i) => {\n          var _song$spotify$album$i;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-row\",\n            children: [song.spotify ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: (_song$spotify$album$i = song.spotify.album.images[0]) === null || _song$spotify$album$i === void 0 ? void 0 : _song$spotify$album$i.url,\n                alt: \"Cover\",\n                className: \"row-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"row-name\",\n                children: song.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"\\xC1lbum: \", song.spotify.album.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"Duraci\\xF3n: \", formatDuration(song.spotify.duration_ms)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"row-name\",\n              children: song.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 25\n            }, this) // Solo muestra el nombre si no hay información de Spotify\n            , /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"row-trash\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: trash,\n                alt: \"Eliminar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 21\n          }, this);\n        }), renderPagination(pageSongs, totalSongs, setPageSongs)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }, this), activeButton === \"artists\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar artistas...\",\n          className: \"admin-input\",\n          value: searchTermArtists,\n          onChange: e => setSearchTermArtists(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 17\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 17\n        }, this) : artists.map((artist, i) => {\n          var _artist$spotify$image;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-row\",\n            children: [artist.spotify ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: ((_artist$spotify$image = artist.spotify.images[0]) === null || _artist$spotify$image === void 0 ? void 0 : _artist$spotify$image.url) || 'https://via.placeholder.com/50',\n                alt: artist.name,\n                className: \"row-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"row-name\",\n                children: artist.spotify.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"G\\xE9neros: \", formatGenres(artist.spotify.genres)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"Seguidores: \", formatFollowers(artist.spotify.followers)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"row-name\",\n              children: artist.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 25\n            }, this) // Solo muestra el nombre si no hay información de Spotify\n            , /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"row-trash\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: trash,\n                alt: \"Eliminar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 21\n          }, this);\n        }), renderPagination(pageArtists, totalArtists, setPageArtists)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 13\n      }, this), activeButton === \"graphs\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"admin-text\",\n          children: \"Mostrando gr\\xE1ficos...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this), !activeButton && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"admin-text\",\n          children: \"Selecciona una opci\\xF3n...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n_s2(Admin, \"N+QyMUO1S0j0zNkBJHY7jyuoy2w=\");\n_c = Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useState","useEffect","trash","axios","rightArrow","leftArrow","jsxDEV","_jsxDEV","Fragment","_Fragment","server_url","process","env","REACT_APP_SERVER_URL","Admin","_s2","_s","$RefreshSig$","activeButton","setActiveButton","fetchedSongs","setFetchedSongs","fetchedArtists","setFetchedArtists","songs","setSongs","artists","setArtists","pageSongs","setPageSongs","pageArtists","setPageArtists","totalSongs","setTotalSongs","totalArtists","setTotalArtists","loading","setLoading","searchTermSongs","setSearchTermSongs","searchTermArtists","setSearchTermArtists","limit","formatFollowers","followers","Intl","NumberFormat","format","formatDuration","durationMs","totalSeconds","Math","round","minutes","floor","seconds","toString","padStart","formatGenres","genres","length","slice","join","pressed","button","prev","searchArtists","query","response","get","params","q","data","error","console","searchSongs","SongSearch","songResults","setSongResults","delayDebounce","setTimeout","trim","then","clearTimeout","fetchSpotifyData","enrichedSongs","Promise","all","map","song","spotify","encodeURIComponent","title","withCredentials","parsed","JSON","parse","tracks","track","items","err","fetchData","songsResponse","totalSongsResponse","total","log","enrichedArtists","artist","name","artistData","artistsResponse","totalArtistsResponse","renderPagination","currentPage","onPageChange","totalPages","ceil","className","children","disabled","onClick","src","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","alt","value","onChange","e","target","role","i","_song$spotify$album$i","album","images","url","duration_ms","_artist$spotify$image","_c","$RefreshReg$"],"sources":["D:/Proyectos/Practicas/spotifai/app-web/src/pages/Admin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Admin.css';\r\nimport trash from \"../assets/trash.svg\";\r\nimport axios from \"axios\";\r\nimport rightArrow from \"../assets/rightArrow.svg\"\r\nimport leftArrow from \"../assets/leftArrow.svg\"\r\n\r\nconst server_url = process.env.REACT_APP_SERVER_URL;\r\n\r\nexport default function Admin() {\r\n  const [activeButton, setActiveButton] = useState(null);\r\n  const [fetchedSongs, setFetchedSongs] = useState(false);\r\n  const [fetchedArtists, setFetchedArtists] = useState(false);\r\n  const [songs, setSongs] = useState([]);\r\n  const [artists, setArtists] = useState([]);\r\n  const [pageSongs, setPageSongs] = useState(1);\r\n  const [pageArtists, setPageArtists] = useState(1);\r\n  const [totalSongs, setTotalSongs] = useState(0);\r\n  const [totalArtists, setTotalArtists] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchTermSongs, setSearchTermSongs] = useState(\"\");\r\n  const [searchTermArtists, setSearchTermArtists] = useState(\"\");\r\n  const limit = 10;\r\n\r\n    const formatFollowers = (followers) => {\r\n        return new Intl.NumberFormat().format(followers);\r\n    };\r\n\r\n    const formatDuration = (durationMs) => {\r\n        const totalSeconds = Math.round(durationMs / 1000); // Convertir a segundos\r\n        const minutes = Math.floor(totalSeconds / 60); // Obtener los minutos\r\n        const seconds = totalSeconds % 60; // Obtener los segundos restantes\r\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`; // Formato \"minutos:segundos\"\r\n    };\r\n\r\n    const formatGenres = (genres) => {\r\n    if (!genres || genres.length === 0) {\r\n        return \"Sin géneros\"; // Si no tiene géneros\r\n    }\r\n    \r\n    if (genres.length > 3) {\r\n        return `${genres.slice(0, 3).join(\", \")}...`; // Si tiene más de 3 géneros, mostrar los 3 primeros y '...'\r\n    }\r\n\r\n    return genres.join(\", \"); // Si tiene 3 o menos géneros, mostramos todos\r\n};\r\n\r\n  const pressed = (button) => {\r\n    setActiveButton(prev => (prev === button ? null : button));\r\n  };\r\n\r\n  const searchArtists = async (query) => {\r\n        try {\r\n            const response = await axios.get(`/api/artists/search/artists`, {\r\n            params: { q: query },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al buscar artistas:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const searchSongs = async (query) => {\r\n        try {\r\n            const response = await axios.get(`/api/songs/search/songs`, {\r\n            params: { q: query },\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error al buscar canciones:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const SongSearch = () => {\r\n        const [searchTermSongs, setSearchTermSongs] = useState('');\r\n        const [songResults, setSongResults] = useState([]);\r\n\r\n        useEffect(() => {\r\n            const delayDebounce = setTimeout(() => {\r\n            if (searchTermSongs.trim()) {\r\n                searchSongs(searchTermSongs).then(setSongResults);\r\n            } else {\r\n                setSongResults([]);\r\n            }\r\n            }, 300); // Espera 300ms tras dejar de escribir\r\n\r\n            return () => clearTimeout(delayDebounce);\r\n    }, [searchTermSongs]);}\r\n\r\n  useEffect(() => {\r\n    const fetchSpotifyData = async () => {\r\n      setLoading(true); // Inicia el loading mientras enriquecemos las canciones con datos de Spotify\r\n\r\n      const enrichedSongs = await Promise.all(songs.map(async (song) => {\r\n        if (!song.spotify) { // Verificamos si la canción ya tiene datos de Spotify\r\n          try {\r\n            const response = await axios.get(`${server_url}/get/songInfo?songName=${encodeURIComponent(song.title)}`, {\r\n              withCredentials: true\r\n            });\r\n            const parsed = JSON.parse(response.data.tracks);\r\n            const track = parsed.tracks.items[0];\r\n            return { ...song, spotify: track };\r\n          } catch (err) {\r\n            return { ...song, spotify: null };\r\n          }\r\n        }\r\n        return song; // Si ya tiene datos de Spotify, la retornamos tal cual\r\n      }));\r\n        setLoading(false); \r\n        setSongs(enrichedSongs);\r\n        setFetchedSongs(false)\r\n    };\r\n\r\n    if (activeButton === \"songs\" && fetchedSongs) {\r\n        fetchSpotifyData();\r\n    }\r\n  }, [fetchedSongs]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"songs\") {\r\n        try {\r\n          const songsResponse = await axios.get(`${server_url}/api/get/songs?page=${pageSongs}&limit=${limit}`);\r\n          const totalSongsResponse = await axios.get(`${server_url}/api/get/songs/count`);\r\n          setSongs(songsResponse.data);\r\n          setTotalSongs(totalSongsResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching songs data:', error);\r\n        }\r\n      }\r\n        setFetchedSongs(true);\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"songs\") {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageSongs]);\r\n\r\n  useEffect(() => {\r\n    const fetchSpotifyData = async () => {\r\n        setLoading(true); // Inicia el loading mientras enriquecemos los artistas con datos de Spotify\r\n        console.log(artists)\r\n        const enrichedArtists = await Promise.all(artists.map(async (artist) => {\r\n        if (!artist.spotify) { // Verificamos si el artista ya tiene datos de Spotify\r\n            try {\r\n            const response = await axios.get(`${server_url}/get/artistInfo?artistName=${encodeURIComponent(artist.name)}`, {\r\n                withCredentials: true\r\n            });\r\n            const artistData = response.data;\r\n            return { ...artist, spotify: artistData };\r\n            } catch (err) {\r\n            return { ...artist, spotify: null }; // Si hay un error, retornamos el artista sin datos de Spotify\r\n            }\r\n        }\r\n        return artist; // Si ya tiene datos de Spotify, lo retornamos tal cual\r\n        }));\r\n\r\n        setLoading(false);\r\n        setArtists(enrichedArtists); // Actualizamos el estado con los artistas enriquecidos\r\n        setFetchedArtists(false);\r\n    };\r\n\r\n    if (activeButton === \"artists\" && fetchedArtists) {\r\n        fetchSpotifyData();\r\n    }\r\n    }, [fetchedArtists]); // El efecto se ejecutará cuando 'fetchedArtists' cambie\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"artists\") {\r\n        try {\r\n          const artistsResponse = await axios.get(`${server_url}/api/get/artists?page=${pageArtists}&limit=${limit}`);\r\n          const totalArtistsResponse = await axios.get(`${server_url}/api/get/artists/count`);\r\n          setArtists(artistsResponse.data);\r\n          setTotalArtists(totalArtistsResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching artists data:', error);\r\n        }\r\n      }\r\n\r\n        setFetchedArtists(true);\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"artists\") {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageArtists]);\r\n\r\n  const renderPagination = (currentPage, total, onPageChange) => {\r\n    const totalPages = Math.ceil(total / limit);\r\n    return (\r\n      <div className=\"pagination\">\r\n        <button className='pagination-button' disabled={currentPage === 1} onClick={() => onPageChange(currentPage - 1)}><img src={leftArrow}></img></button>\r\n        <span className='pagination-text'>Página {currentPage} de {totalPages}</span>\r\n        <button className='pagination-button' disabled={currentPage === totalPages} onClick={() => onPageChange(currentPage + 1)}><img src={rightArrow}></img></button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-container\">\r\n      <aside className=\"sidebar\">\r\n        <button\r\n          onClick={() => pressed(\"users\")}\r\n          className={`sidebar-btn ${activeButton === \"users\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Usuarios\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"songs\")}\r\n          className={`sidebar-btn ${activeButton === \"songs\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Canciones\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"artists\")}\r\n          className={`sidebar-btn ${activeButton === \"artists\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Artistas\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"graphs\")}\r\n          className={`sidebar-btn ${activeButton === \"graphs\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Gráficos\r\n        </button>\r\n      </aside>\r\n\r\n      <main className=\"main-content\">\r\n        <h2 className=\"admin-header\">Panel de admin</h2>\r\n\r\n        {activeButton === \"users\" && (\r\n          <div className=\"admin-table\">\r\n            <input type=\"text\" placeholder=\"Buscar...\" className=\"admin-input\" />\r\n            <div className=\"admin-row\">\r\n              <img src=\"https://via.placeholder.com/50\" alt=\"Usuario\" className=\"row-img\" />\r\n              <h3 className=\"row-name\">Nombre del Usuario</h3>\r\n              <p className=\"row-info\">Descripción breve o rol</p>\r\n              <button className=\"row-trash\">\r\n                <img src={trash} alt=\"Eliminar\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeButton === \"songs\" && (\r\n            <div className=\"admin-table\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Buscar canciones...\"\r\n                    className=\"admin-input\"\r\n                    value={searchTermSongs}\r\n                    onChange={(e) => setSearchTermSongs(e.target.value)}\r\n                />\r\n                {loading ? (\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                songs.map((song, i) => (\r\n                    <div className=\"admin-row\" key={i}>\r\n                    {song.spotify ? (\r\n                        <>\r\n                        <img src={song.spotify.album.images[0]?.url} alt=\"Cover\" className='row-img'/>\r\n                        <h3 className=\"row-name\">{song.title}</h3>\r\n                        <p className=\"row-info\">Álbum: {song.spotify.album.name}</p>\r\n                        <p className=\"row-info\">Duración: {formatDuration(song.spotify.duration_ms)}</p>\r\n                        </>\r\n                    ) : (\r\n                        <h3 className=\"row-name\">{song.title}</h3> // Solo muestra el nombre si no hay información de Spotify\r\n                    )}\r\n                    <button className=\"row-trash\">\r\n                        <img src={trash} alt=\"Eliminar\" />\r\n                    </button>\r\n                    </div>\r\n                ))\r\n                )}\r\n                {renderPagination(pageSongs, totalSongs, setPageSongs)}\r\n            </div>\r\n            )}\r\n\r\n        {activeButton === \"artists\" && (\r\n            <div className=\"admin-table\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Buscar artistas...\"\r\n                    className=\"admin-input\"\r\n                    value={searchTermArtists}\r\n                    onChange={(e) => setSearchTermArtists(e.target.value)}\r\n                />\r\n                {loading ? (\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                artists.map((artist, i) => (\r\n                    <div className=\"admin-row\" key={i}>\r\n                    {artist.spotify ? (\r\n                        <>\r\n                        <img\r\n                            src={artist.spotify.images[0]?.url || 'https://via.placeholder.com/50'}\r\n                            alt={artist.name}\r\n                            className='row-img'\r\n                        />\r\n                        <h3 className=\"row-name\">{artist.spotify.name}</h3>\r\n                        <p className=\"row-info\">Géneros: {formatGenres(artist.spotify.genres)}</p>\r\n                        <p className=\"row-info\">Seguidores: {formatFollowers(artist.spotify.followers)}</p>\r\n                        </>\r\n                    ) : (\r\n                        <h3 className=\"row-name\">{artist.name}</h3> // Solo muestra el nombre si no hay información de Spotify\r\n                    )}\r\n                    <button className=\"row-trash\">\r\n                        <img src={trash} alt=\"Eliminar\" />\r\n                    </button>\r\n                    </div>\r\n                ))\r\n                )}\r\n                {renderPagination(pageArtists, totalArtists, setPageArtists)}\r\n            </div>\r\n            )}\r\n\r\n        {activeButton === \"graphs\" && (\r\n          <div className=\"admin-table\">\r\n            <p className='admin-text'>Mostrando gráficos...</p>\r\n          </div>\r\n        )}\r\n\r\n        {!activeButton && (\r\n          <div className=\"admin-table\">\r\n            <p className='admin-text'>Selecciona una opción...</p>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}