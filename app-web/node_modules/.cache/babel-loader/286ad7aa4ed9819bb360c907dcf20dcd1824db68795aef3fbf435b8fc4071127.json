{"ast":null,"code":"var _jsxFileName = \"D:\\\\Proyectos\\\\Practicas\\\\spotifai\\\\app-web\\\\src\\\\pages\\\\Admin.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Admin.css';\nimport trash from \"../assets/trash.svg\";\nimport axios from \"axios\";\nimport rightArrow from \"../assets/rightArrow.svg\";\nimport leftArrow from \"../assets/leftArrow.svg\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst server_url = process.env.REACT_APP_SERVER_URL;\nexport default function Admin() {\n  _s();\n  const [activeButton, setActiveButton] = useState(null);\n  const [fetchedSongs, setFetchedSongs] = useState(false);\n  const [fetchedArtists, setFetchedArtists] = useState(false);\n  const [songs, setSongs] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [pageSongs, setPageSongs] = useState(1);\n  const [pageArtists, setPageArtists] = useState(1);\n  const [pageUsers, setPageUsers] = useState(1);\n  const [totalSongs, setTotalSongs] = useState(0);\n  const [totalArtists, setTotalArtists] = useState(0);\n  const [totalUsers, setTotalUsers] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [paginationDisabled, setPaginationDisabled] = useState(false);\n  const [searchTermSongs, setSearchTermSongs] = useState(\"\");\n  const [searchTermArtists, setSearchTermArtists] = useState(\"\");\n  const [searchTermUsers, setSearchTermUsers] = useState(\"\");\n  const [searchTermGenre, setSearchTermGenre] = useState(\"\");\n  const [selectedGenre, setSelectedGenre] = useState(\"\");\n  const [genres, setGenres] = useState([]);\n  const limit = 10;\n  const formatFollowers = followers => {\n    return new Intl.NumberFormat().format(followers);\n  };\n  const formatDuration = durationMs => {\n    const totalSeconds = Math.round(durationMs / 1000); // Convertir a segundos\n    const minutes = Math.floor(totalSeconds / 60); // Obtener los minutos\n    const seconds = totalSeconds % 60; // Obtener los segundos restantes\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`; // Formato \"minutos:segundos\"\n  };\n  const formatGenres = genres => {\n    if (!genres || genres.length === 0) {\n      return \"Sin géneros\"; // Si no tiene géneros\n    }\n    if (genres.length > 3) {\n      return `${genres.slice(0, 3).join(\", \")}...`; // Si tiene más de 3 géneros, mostrar los 3 primeros y '...'\n    }\n    return genres.join(\", \"); // Si tiene 3 o menos géneros, mostramos todos\n  };\n  const pressed = button => {\n    setActiveButton(prev => prev === button ? null : button);\n  };\n  useEffect(() => {\n    const fetchSpotifyData = async () => {\n      setLoading(true); // Inicia el loading mientras enriquecemos las canciones con datos de Spotify\n\n      const enrichedSongs = await Promise.all(songs.map(async song => {\n        if (!song.spotify) {\n          // Verificamos si la canción ya tiene datos de Spotify\n          try {\n            const response = await axios.get(`${server_url}/get/songInfo?songName=${encodeURIComponent(song.title)}`, {\n              withCredentials: true\n            });\n            const parsed = JSON.parse(response.data.tracks);\n            const track = parsed.tracks.items[0];\n            return {\n              ...song,\n              spotify: track\n            };\n          } catch (err) {\n            return {\n              ...song,\n              spotify: null\n            };\n          }\n        }\n        return song; // Si ya tiene datos de Spotify, la retornamos tal cual\n      }));\n      setLoading(false);\n      setSongs(enrichedSongs);\n      setFetchedSongs(false);\n    };\n    if (activeButton === \"songs\" && fetchedSongs) {\n      fetchSpotifyData();\n    }\n  }, [fetchedSongs]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"songs\") {\n        try {\n          let songsResponse;\n          if (selectedGenre === \"\") {\n            songsResponse = await axios.get(`${server_url}/api/get/songs?page=${pageSongs}&limit=${limit}`);\n          } else {\n            songsResponse = await axios.get(`${server_url}/api/get/songs/${selectedGenre}?page=${pageSongs}&limit=${limit}`);\n          }\n          const totalSongsResponse = await axios.get(`${server_url}/api/get/songs/count`);\n          setSongs(songsResponse.data);\n          setTotalSongs(totalSongsResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching songs data:', error);\n        }\n      }\n      setFetchedSongs(true);\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"songs\" && !paginationDisabled) {\n      fetchData();\n    }\n  }, [activeButton, pageSongs, paginationDisabled, selectedGenre]);\n  useEffect(() => {\n    const fetchSpotifyData = async () => {\n      setLoading(true); // Inicia el loading mientras enriquecemos los artistas con datos de Spotify\n      const enrichedArtists = await Promise.all(artists.map(async artist => {\n        if (!artist.spotify) {\n          // Verificamos si el artista ya tiene datos de Spotify\n          try {\n            const response = await axios.get(`${server_url}/get/artistInfo?artistName=${encodeURIComponent(artist.name)}`, {\n              withCredentials: true\n            });\n            const artistData = response.data;\n            return {\n              ...artist,\n              spotify: artistData\n            };\n          } catch (err) {\n            return {\n              ...artist,\n              spotify: null\n            }; // Si hay un error, retornamos el artista sin datos de Spotify\n          }\n        }\n        return artist; // Si ya tiene datos de Spotify, lo retornamos tal cual\n      }));\n      setLoading(false);\n      setArtists(enrichedArtists); // Actualizamos el estado con los artistas enriquecidos\n      setFetchedArtists(false);\n    };\n    if (activeButton === \"artists\" && fetchedArtists) {\n      fetchSpotifyData();\n    }\n  }, [fetchedArtists]); // El efecto se ejecutará cuando 'fetchedArtists' cambie\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"artists\") {\n        try {\n          const artistsResponse = await axios.get(`${server_url}/api/get/artists?page=${pageArtists}&limit=${limit}`);\n          const totalArtistsResponse = await axios.get(`${server_url}/api/get/artists/count`);\n          setArtists(artistsResponse.data);\n          setTotalArtists(totalArtistsResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching artists data:', error);\n        }\n      }\n      setFetchedArtists(true);\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"artists\" && !paginationDisabled) {\n      fetchData();\n    }\n  }, [activeButton, pageArtists, paginationDisabled]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Empieza la carga de canciones\n\n      if (activeButton === \"users\") {\n        try {\n          const usersResponse = await axios.get(`${server_url}/api/get/users?page=${pageUsers}&limit=${limit}`);\n          const totalUsersResponse = await axios.get(`${server_url}/api/get/users/count`);\n          setUsers(usersResponse.data);\n          setTotalUsers(totalUsersResponse.data.total);\n        } catch (error) {\n          console.error('Error fetching artists data:', error);\n        }\n      }\n      setLoading(false); // Finaliza la carga de canciones\n    };\n    if (activeButton === \"users\" && !paginationDisabled) {\n      fetchData();\n    }\n  }, [activeButton, pageUsers, paginationDisabled]);\n  useEffect(() => {\n    axios.get(\"/api/get/genres\").then(res => {\n      setGenres(res.data);\n      console.log(res.data);\n    });\n  }, []);\n  const searchArtists = async query => {\n    try {\n      const response = await axios.get(`/api/search/artists`, {\n        params: {\n          q: query\n        }\n      });\n      setArtists(response.data);\n      setFetchedArtists(true);\n    } catch (error) {\n      console.error('Error al buscar artistas:', error);\n      return [];\n    }\n  };\n  const searchSongs = async query => {\n    try {\n      const response = await axios.get(server_url + `/api/search/songs`, {\n        params: {\n          q: query\n        }\n      });\n      setSongs(response.data);\n      setFetchedSongs(true);\n    } catch (error) {\n      console.error('Error al buscar canciones:', error);\n      return [];\n    }\n  };\n  const searchSongsGenre = async query => {};\n  const searchUsers = async query => {\n    try {\n      const response = await axios.get(server_url + `/api/search/users`, {\n        params: {\n          q: query\n        }\n      });\n      setUsers(response.data);\n    } catch (error) {\n      console.error('Error al buscar canciones:', error);\n      return [];\n    }\n  };\n  const handleSearchArtists = () => {\n    if (searchTermArtists === \"\") {\n      setPaginationDisabled(false);\n    } else {\n      searchArtists(searchTermArtists);\n      setPaginationDisabled(true);\n    }\n  };\n  const handleSearchSongs = () => {\n    if (searchTermSongs === \"\") {\n      setPaginationDisabled(false);\n    } else {\n      searchSongs(searchTermSongs);\n      setPaginationDisabled(true);\n    }\n  };\n  const handleSearchSongsGenre = () => {\n    setSelectedGenre(searchTermGenre);\n  };\n  const handleSearchUsers = () => {\n    if (searchTermUsers === \"\") {\n      setPaginationDisabled(false);\n    } else {\n      searchUsers(searchTermUsers);\n      setPaginationDisabled(true);\n    }\n  };\n  const handleDeleteSong = async id => {\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar esta canción?\")) return;\n    try {\n      await axios.delete(server_url + `/api/delete/song/${id}`);\n      setSongs(prev => prev.filter(song => song.id !== id));\n    } catch (err) {\n      console.error(\"Error al eliminar canción:\", err);\n      alert(\"Error al eliminar la canción.\");\n    }\n  };\n  const handleDeleteAdmin = async id => {\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este artista?\")) return;\n    try {\n      await axios.delete(server_url + `/api/delete/artists/${id}`);\n      setArtists(prev => prev.filter(artist => artist.id !== id));\n    } catch (err) {\n      console.error(\"Error al eliminar el artista:\", err);\n      alert(\"Error al eliminar la artista.\");\n    }\n  };\n  const handleDeleteUser = async id => {\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este usuario?\")) return;\n    try {\n      await axios.delete(server_url + `/api/delete/users/${id}`);\n      setUsers(prev => prev.filter(user => user.id !== id));\n    } catch (err) {\n      console.error(\"Error al eliminar el Usuario:\", err);\n      alert(\"Error al eliminar la artista.\");\n    }\n  };\n  function traducirCodigoPais(codigoIso) {\n    const regionNames = new Intl.DisplayNames(['es'], {\n      type: 'region'\n    });\n    return regionNames.of(codigoIso.toUpperCase());\n  }\n  const renderPagination = (currentPage, total, onPageChange) => {\n    const totalPages = Math.ceil(total / limit);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pagination-button\",\n        disabled: currentPage === 1 || paginationDisabled,\n        onClick: () => onPageChange(currentPage - 1),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: leftArrow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 144\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"pagination-text\",\n        children: [\"P\\xE1gina \", currentPage, \" de \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pagination-button\",\n        disabled: currentPage === totalPages || paginationDisabled,\n        onClick: () => onPageChange(currentPage + 1),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: rightArrow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 153\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"users\"),\n        className: `sidebar-btn ${activeButton === \"users\" ? \"pressed\" : \"\"}`,\n        children: \"Usuarios\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"songs\"),\n        className: `sidebar-btn ${activeButton === \"songs\" ? \"pressed\" : \"\"}`,\n        children: \"Canciones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"artists\"),\n        className: `sidebar-btn ${activeButton === \"artists\" ? \"pressed\" : \"\"}`,\n        children: \"Artistas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => pressed(\"graphs\"),\n        className: `sidebar-btn ${activeButton === \"graphs\" ? \"pressed\" : \"\"}`,\n        children: \"Gr\\xE1ficos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"admin-header\",\n        children: \"Panel de admin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), activeButton === \"users\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar usuarios...\",\n          className: \"admin-input\",\n          value: searchTermUsers,\n          onChange: e => setSearchTermUsers(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleSearchUsers();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 17\n        }, this) : users.map((user, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"admin-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: user.imagen,\n            alt: \"Cover\",\n            className: \"row-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"row-name\",\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"row-info\",\n            children: [\"Pais: \", traducirCodigoPais(user.pais)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"row-info\",\n            children: [\"Id: \", user.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteUser(user.id),\n            className: \"row-trash\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: trash,\n              alt: \"Eliminar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 25\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 21\n        }, this)), renderPagination(pageUsers, totalUsers, setPageUsers)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this), activeButton === \"songs\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar canciones...\",\n          className: \"admin-input\",\n          value: searchTermSongs,\n          onChange: e => setSearchTermSongs(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleSearchSongs();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          list: \"genre-options\",\n          placeholder: \"Filtrar por g\\xE9nero...\",\n          className: \"admin-input\",\n          value: selectedGenre,\n          onChange: e => setSearchTermGenre(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleSearchSongsGenre();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n          id: \"genre-options\",\n          children: genres.map((genre, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: genre\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 17\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 17\n        }, this) : songs.map((song, i) => {\n          var _song$spotify$album$i;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-row\",\n            children: song.spotify ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: (_song$spotify$album$i = song.spotify.album.images[0]) === null || _song$spotify$album$i === void 0 ? void 0 : _song$spotify$album$i.url,\n                alt: \"Cover\",\n                className: \"row-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"row-name\",\n                children: song.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"\\xC1lbum: \", song.spotify.album.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"Duraci\\xF3n: \", formatDuration(song.spotify.duration_ms)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteSong(song.spotify.id),\n                className: \"row-trash\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: trash,\n                  alt: \"Eliminar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"row-name\",\n              children: song.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 25\n            }, this) // Solo muestra el nombre si no hay información de Spotify\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 21\n          }, this);\n        }), renderPagination(pageSongs, totalSongs, setPageSongs)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 13\n      }, this), activeButton === \"artists\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar artistas...\",\n          className: \"admin-input\",\n          value: searchTermArtists,\n          onChange: e => setSearchTermArtists(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleSearchArtists();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 17\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border spinner-custom\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 17\n        }, this) : artists.map((artist, i) => {\n          var _artist$spotify$image;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"admin-row\",\n            children: artist.spotify ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: ((_artist$spotify$image = artist.spotify.images[0]) === null || _artist$spotify$image === void 0 ? void 0 : _artist$spotify$image.url) || 'https://via.placeholder.com/50',\n                alt: artist.name,\n                className: \"row-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"row-name\",\n                children: artist.spotify.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"G\\xE9neros: \", formatGenres(artist.spotify.genres)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"row-info\",\n                children: [\"Seguidores: \", formatFollowers(artist.spotify.followers)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  handleDeleteAdmin(artist.id);\n                },\n                className: \"row-trash\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: trash,\n                  alt: \"Eliminar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"row-name\",\n              children: artist.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 25\n            }, this) // Solo muestra el nombre si no hay información de Spotify\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 21\n          }, this);\n        }), renderPagination(pageArtists, totalArtists, setPageArtists)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 13\n      }, this), activeButton === \"graphs\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"admin-text\",\n          children: \"Mostrando gr\\xE1ficos...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 11\n      }, this), !activeButton && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-table\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"admin-text\",\n          children: \"Selecciona una opci\\xF3n...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 5\n  }, this);\n}\n_s(Admin, \"1GAoeAa9DsoaQSgJBw0ouCagAHM=\");\n_c = Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useState","useEffect","trash","axios","rightArrow","leftArrow","jsxDEV","_jsxDEV","Fragment","_Fragment","server_url","process","env","REACT_APP_SERVER_URL","Admin","_s","activeButton","setActiveButton","fetchedSongs","setFetchedSongs","fetchedArtists","setFetchedArtists","songs","setSongs","artists","setArtists","users","setUsers","pageSongs","setPageSongs","pageArtists","setPageArtists","pageUsers","setPageUsers","totalSongs","setTotalSongs","totalArtists","setTotalArtists","totalUsers","setTotalUsers","loading","setLoading","paginationDisabled","setPaginationDisabled","searchTermSongs","setSearchTermSongs","searchTermArtists","setSearchTermArtists","searchTermUsers","setSearchTermUsers","searchTermGenre","setSearchTermGenre","selectedGenre","setSelectedGenre","genres","setGenres","limit","formatFollowers","followers","Intl","NumberFormat","format","formatDuration","durationMs","totalSeconds","Math","round","minutes","floor","seconds","toString","padStart","formatGenres","length","slice","join","pressed","button","prev","fetchSpotifyData","enrichedSongs","Promise","all","map","song","spotify","response","get","encodeURIComponent","title","withCredentials","parsed","JSON","parse","data","tracks","track","items","err","fetchData","songsResponse","totalSongsResponse","total","error","console","enrichedArtists","artist","name","artistData","artistsResponse","totalArtistsResponse","usersResponse","totalUsersResponse","then","res","log","searchArtists","query","params","q","searchSongs","searchSongsGenre","searchUsers","handleSearchArtists","handleSearchSongs","handleSearchSongsGenre","handleSearchUsers","handleDeleteSong","id","window","confirm","delete","filter","alert","handleDeleteAdmin","handleDeleteUser","user","traducirCodigoPais","codigoIso","regionNames","DisplayNames","type","of","toUpperCase","renderPagination","currentPage","onPageChange","totalPages","ceil","className","children","disabled","onClick","src","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onKeyDown","key","role","i","imagen","alt","pais","list","genre","_song$spotify$album$i","album","images","url","duration_ms","_artist$spotify$image","_c","$RefreshReg$"],"sources":["D:/Proyectos/Practicas/spotifai/app-web/src/pages/Admin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Admin.css';\r\nimport trash from \"../assets/trash.svg\";\r\nimport axios from \"axios\";\r\nimport rightArrow from \"../assets/rightArrow.svg\"\r\nimport leftArrow from \"../assets/leftArrow.svg\"\r\n\r\nconst server_url = process.env.REACT_APP_SERVER_URL;\r\n\r\nexport default function Admin() {\r\n  const [activeButton, setActiveButton] = useState(null);\r\n  const [fetchedSongs, setFetchedSongs] = useState(false);\r\n  const [fetchedArtists, setFetchedArtists] = useState(false);\r\n  const [songs, setSongs] = useState([]);\r\n  const [artists, setArtists] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [pageSongs, setPageSongs] = useState(1);\r\n  const [pageArtists, setPageArtists] = useState(1);\r\n  const [pageUsers, setPageUsers] = useState(1);\r\n  const [totalSongs, setTotalSongs] = useState(0);\r\n  const [totalArtists, setTotalArtists] = useState(0);\r\n  const [totalUsers, setTotalUsers] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [paginationDisabled, setPaginationDisabled] = useState(false);\r\n  const [searchTermSongs, setSearchTermSongs] = useState(\"\");\r\n  const [searchTermArtists, setSearchTermArtists] = useState(\"\");\r\n  const [searchTermUsers, setSearchTermUsers] = useState(\"\");\r\n  const [searchTermGenre, setSearchTermGenre] = useState(\"\");\r\n  const [selectedGenre, setSelectedGenre] = useState(\"\");\r\n  const [genres, setGenres] = useState([]);\r\n  const limit = 10;\r\n\r\n    const formatFollowers = (followers) => {\r\n        return new Intl.NumberFormat().format(followers);\r\n    };\r\n\r\n    const formatDuration = (durationMs) => {\r\n        const totalSeconds = Math.round(durationMs / 1000); // Convertir a segundos\r\n        const minutes = Math.floor(totalSeconds / 60); // Obtener los minutos\r\n        const seconds = totalSeconds % 60; // Obtener los segundos restantes\r\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`; // Formato \"minutos:segundos\"\r\n    };\r\n\r\n    const formatGenres = (genres) => {\r\n    if (!genres || genres.length === 0) {\r\n        return \"Sin géneros\"; // Si no tiene géneros\r\n    }\r\n    \r\n    if (genres.length > 3) {\r\n        return `${genres.slice(0, 3).join(\", \")}...`; // Si tiene más de 3 géneros, mostrar los 3 primeros y '...'\r\n    }\r\n\r\n    return genres.join(\", \"); // Si tiene 3 o menos géneros, mostramos todos\r\n};\r\n\r\n  const pressed = (button) => {\r\n    setActiveButton(prev => (prev === button ? null : button));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchSpotifyData = async () => {\r\n      setLoading(true); // Inicia el loading mientras enriquecemos las canciones con datos de Spotify\r\n\r\n      const enrichedSongs = await Promise.all(songs.map(async (song) => {\r\n        if (!song.spotify) { // Verificamos si la canción ya tiene datos de Spotify\r\n          try {\r\n            const response = await axios.get(`${server_url}/get/songInfo?songName=${encodeURIComponent(song.title)}`, {\r\n              withCredentials: true\r\n            });\r\n            const parsed = JSON.parse(response.data.tracks);\r\n            const track = parsed.tracks.items[0];\r\n            return { ...song, spotify: track };\r\n          } catch (err) {\r\n            return { ...song, spotify: null };\r\n          }\r\n        }\r\n        return song; // Si ya tiene datos de Spotify, la retornamos tal cual\r\n      }));\r\n        setLoading(false); \r\n        setSongs(enrichedSongs);\r\n        setFetchedSongs(false)\r\n    };\r\n\r\n    if (activeButton === \"songs\" && fetchedSongs) {\r\n        fetchSpotifyData();\r\n    }\r\n  }, [fetchedSongs]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"songs\") {\r\n        try {\r\n          let songsResponse\r\n          if (selectedGenre === \"\") {\r\n            songsResponse = await axios.get(`${server_url}/api/get/songs?page=${pageSongs}&limit=${limit}`);\r\n          } else {\r\n            songsResponse = await axios.get(`${server_url}/api/get/songs/${selectedGenre}?page=${pageSongs}&limit=${limit}`);\r\n          }\r\n          const totalSongsResponse = await axios.get(`${server_url}/api/get/songs/count`);\r\n          setSongs(songsResponse.data);\r\n          setTotalSongs(totalSongsResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching songs data:', error);\r\n        }\r\n      }\r\n        setFetchedSongs(true);\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"songs\" && !paginationDisabled) {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageSongs, paginationDisabled, selectedGenre]);\r\n\r\n  useEffect(() => {\r\n    const fetchSpotifyData = async () => {\r\n        setLoading(true); // Inicia el loading mientras enriquecemos los artistas con datos de Spotify\r\n        const enrichedArtists = await Promise.all(artists.map(async (artist) => {\r\n        if (!artist.spotify) { // Verificamos si el artista ya tiene datos de Spotify\r\n            try {\r\n            const response = await axios.get(`${server_url}/get/artistInfo?artistName=${encodeURIComponent(artist.name)}`, {\r\n                withCredentials: true\r\n            });\r\n            const artistData = response.data;\r\n            return { ...artist, spotify: artistData };\r\n            } catch (err) {\r\n            return { ...artist, spotify: null }; // Si hay un error, retornamos el artista sin datos de Spotify\r\n            }\r\n        }\r\n        return artist; // Si ya tiene datos de Spotify, lo retornamos tal cual\r\n        }));\r\n\r\n        setLoading(false);\r\n        setArtists(enrichedArtists); // Actualizamos el estado con los artistas enriquecidos\r\n        setFetchedArtists(false);\r\n    };\r\n\r\n    if (activeButton === \"artists\" && fetchedArtists) {\r\n        fetchSpotifyData();\r\n    }\r\n    }, [fetchedArtists]); // El efecto se ejecutará cuando 'fetchedArtists' cambie\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"artists\") {\r\n        try {\r\n          const artistsResponse = await axios.get(`${server_url}/api/get/artists?page=${pageArtists}&limit=${limit}`);\r\n          const totalArtistsResponse = await axios.get(`${server_url}/api/get/artists/count`);\r\n          setArtists(artistsResponse.data);\r\n          setTotalArtists(totalArtistsResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching artists data:', error);\r\n        }\r\n      }\r\n\r\n        setFetchedArtists(true);\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"artists\" && !paginationDisabled) {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageArtists, paginationDisabled]);\r\n\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Empieza la carga de canciones\r\n\r\n      if (activeButton === \"users\") {\r\n        try {\r\n          const usersResponse = await axios.get(`${server_url}/api/get/users?page=${pageUsers}&limit=${limit}`);\r\n          const totalUsersResponse = await axios.get(`${server_url}/api/get/users/count`);\r\n          setUsers(usersResponse.data);\r\n          setTotalUsers(totalUsersResponse.data.total);\r\n        } catch (error) {\r\n          console.error('Error fetching artists data:', error);\r\n        }\r\n      }\r\n\r\n        setLoading(false); // Finaliza la carga de canciones\r\n    };\r\n\r\n    if (activeButton === \"users\" && !paginationDisabled) {\r\n      fetchData();\r\n    }\r\n  }, [activeButton, pageUsers, paginationDisabled]);\r\n\r\n  useEffect(() => {\r\n    axios.get(\"/api/get/genres\").then(res => {\r\n      setGenres(res.data)\r\n      console.log(res.data)\r\n    });\r\n  }, []);\r\n\r\n  const searchArtists = async (query) => {\r\n        try {\r\n            const response = await axios.get(`/api/search/artists`, {\r\n            params: { q: query },\r\n            });\r\n            setArtists(response.data)\r\n            setFetchedArtists(true)\r\n        } catch (error) {\r\n            console.error('Error al buscar artistas:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const searchSongs = async (query) => {\r\n        try {\r\n            const response = await axios.get(server_url+`/api/search/songs`, {\r\n            params: { q: query },\r\n            });\r\n            setSongs(response.data)\r\n            setFetchedSongs(true)\r\n        } catch (error) {\r\n            console.error('Error al buscar canciones:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const searchSongsGenre = async (query) => {\r\n\r\n    }\r\n\r\n    const searchUsers = async (query) => {\r\n        try {\r\n            const response = await axios.get(server_url+`/api/search/users`, {\r\n            params: { q: query },\r\n            });\r\n            setUsers(response.data)\r\n        } catch (error) {\r\n            console.error('Error al buscar canciones:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const handleSearchArtists = () => {\r\n        if (searchTermArtists === \"\"){\r\n            setPaginationDisabled(false)\r\n        } else {\r\n            searchArtists(searchTermArtists)\r\n            setPaginationDisabled(true)\r\n        }\r\n    }\r\n\r\n    const handleSearchSongs = () => {\r\n        if (searchTermSongs === \"\"){\r\n            setPaginationDisabled(false)\r\n        } else {\r\n            searchSongs(searchTermSongs)\r\n            setPaginationDisabled(true)\r\n        }\r\n    }\r\n\r\n    const handleSearchSongsGenre = () => {\r\n      setSelectedGenre(searchTermGenre)\r\n    }\r\n\r\n    const handleSearchUsers = () => {\r\n        if (searchTermUsers === \"\"){\r\n            setPaginationDisabled(false)\r\n        } else {\r\n            searchUsers(searchTermUsers)\r\n            setPaginationDisabled(true)\r\n        }\r\n    }\r\n\r\n    const handleDeleteSong = async (id) => {\r\n      if (!window.confirm(\"¿Estás seguro de que quieres eliminar esta canción?\")) return;\r\n      try {\r\n        await axios.delete(server_url+`/api/delete/song/${id}`);\r\n        setSongs((prev) => prev.filter((song) => song.id !== id));\r\n      } catch (err) {\r\n        console.error(\"Error al eliminar canción:\", err);\r\n        alert(\"Error al eliminar la canción.\");\r\n      }\r\n  };\r\n\r\n  const handleDeleteAdmin = async (id) => {\r\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este artista?\")) return;\r\n      try {\r\n        await axios.delete(server_url+`/api/delete/artists/${id}`);\r\n        setArtists((prev) => prev.filter((artist) => artist.id !== id));\r\n      } catch (err) {\r\n        console.error(\"Error al eliminar el artista:\", err);\r\n        alert(\"Error al eliminar la artista.\");\r\n      }\r\n  };\r\n\r\n  const handleDeleteUser = async (id) => {\r\n    if (!window.confirm(\"¿Estás seguro de que quieres eliminar este usuario?\")) return;\r\n      try {\r\n        await axios.delete(server_url+`/api/delete/users/${id}`);\r\n        setUsers((prev) => prev.filter((user) => user.id !== id));\r\n      } catch (err) {\r\n        console.error(\"Error al eliminar el Usuario:\", err);\r\n        alert(\"Error al eliminar la artista.\");\r\n      }\r\n  };\r\n\r\n  function traducirCodigoPais(codigoIso) {\r\n  const regionNames = new Intl.DisplayNames(['es'], { type: 'region' });\r\n  return regionNames.of(codigoIso.toUpperCase());\r\n}\r\n\r\n  const renderPagination = (currentPage, total, onPageChange) => {\r\n    const totalPages = Math.ceil(total / limit);\r\n    return (\r\n      <div className=\"pagination\">\r\n        <button className='pagination-button' disabled={currentPage === 1 || paginationDisabled} onClick={() => onPageChange(currentPage - 1)}><img src={leftArrow}></img></button>\r\n        <span className='pagination-text'>Página {currentPage} de {totalPages}</span>\r\n        <button className='pagination-button' disabled={currentPage === totalPages || paginationDisabled} onClick={() => onPageChange(currentPage + 1)}><img src={rightArrow}></img></button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-container\">\r\n      <aside className=\"sidebar\">\r\n        <button\r\n          onClick={() => pressed(\"users\")}\r\n          className={`sidebar-btn ${activeButton === \"users\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Usuarios\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"songs\")}\r\n          className={`sidebar-btn ${activeButton === \"songs\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Canciones\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"artists\")}\r\n          className={`sidebar-btn ${activeButton === \"artists\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Artistas\r\n        </button>\r\n        <button\r\n          onClick={() => pressed(\"graphs\")}\r\n          className={`sidebar-btn ${activeButton === \"graphs\" ? \"pressed\" : \"\"}`}\r\n        >\r\n          Gráficos\r\n        </button>\r\n      </aside>\r\n\r\n      <main className=\"main-content\">\r\n        <h2 className=\"admin-header\">Panel de admin</h2>\r\n\r\n        {activeButton === \"users\" && (\r\n          <div className=\"admin-table\">\r\n            <input\r\n                    type=\"text\"\r\n                    placeholder=\"Buscar usuarios...\"\r\n                    className=\"admin-input\"\r\n                    value={searchTermUsers}\r\n                    onChange={(e) => setSearchTermUsers(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\"){\r\n                            handleSearchUsers()\r\n                        }\r\n                    }}\r\n                />\r\n                {loading ? (\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                users.map((user, i) => (\r\n                    <div className=\"admin-row\" key={i}>\r\n                        <img src={user.imagen} alt=\"Cover\" className='row-img'/>\r\n                        <h3 className=\"row-name\">{user.name}</h3>\r\n                        <p className=\"row-info\">Pais: {traducirCodigoPais(user.pais)}</p>\r\n                        <p className=\"row-info\">Id: {user.id}</p>\r\n                        <button onClick={() => handleDeleteUser(user.id)} className=\"row-trash\">\r\n                            <img src={trash} alt=\"Eliminar\" />\r\n                        </button>\r\n                    </div>\r\n                ))\r\n                )}\r\n                {renderPagination(pageUsers, totalUsers, setPageUsers)}\r\n          </div>\r\n        )}\r\n\r\n        {activeButton === \"songs\" && (\r\n            <div className=\"admin-table\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Buscar canciones...\"\r\n                    className=\"admin-input\"\r\n                    value={searchTermSongs}\r\n                    onChange={(e) => setSearchTermSongs(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\"){\r\n                            handleSearchSongs()\r\n                        }\r\n                    }}\r\n                />\r\n                <input\r\n                  list=\"genre-options\"\r\n                  placeholder=\"Filtrar por género...\"\r\n                  className=\"admin-input\"\r\n                  value={selectedGenre}\r\n                  onChange={(e) => setSearchTermGenre(e.target.value)}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === \"Enter\"){\r\n                      handleSearchSongsGenre();\r\n                    }\r\n                  }}\r\n                />\r\n                <datalist id=\"genre-options\">\r\n                    {genres.map((genre, i) => (\r\n                        <option key={i} value={genre} />\r\n                    ))}\r\n                </datalist>\r\n                {loading ? (\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                songs.map((song, i) => (\r\n                    <div className=\"admin-row\" key={i}>\r\n                    {song.spotify ? (\r\n                        <>\r\n                        <img src={song.spotify.album.images[0]?.url} alt=\"Cover\" className='row-img'/>\r\n                        <h3 className=\"row-name\">{song.title}</h3>\r\n                        <p className=\"row-info\">Álbum: {song.spotify.album.name}</p>\r\n                        <p className=\"row-info\">Duración: {formatDuration(song.spotify.duration_ms)}</p>\r\n                        <button onClick={() => handleDeleteSong(song.spotify.id)} className=\"row-trash\">\r\n                            <img src={trash} alt=\"Eliminar\" />\r\n                        </button>\r\n                        </>\r\n                    ) : (\r\n                        <h3 className=\"row-name\">{song.title}</h3> // Solo muestra el nombre si no hay información de Spotify\r\n                    )}\r\n                    </div>\r\n                ))\r\n                )}\r\n                {renderPagination(pageSongs, totalSongs, setPageSongs)}\r\n            </div>\r\n            )}\r\n\r\n        {activeButton === \"artists\" && (\r\n            <div className=\"admin-table\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Buscar artistas...\"\r\n                    className=\"admin-input\"\r\n                    value={searchTermArtists}\r\n                    onChange={(e) => setSearchTermArtists(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\"){\r\n                            handleSearchArtists()\r\n                        }\r\n                    }}\r\n                />\r\n                {loading ? (\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <div className=\"spinner-border spinner-custom\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                artists.map((artist, i) => (\r\n                    <div className=\"admin-row\" key={i}>\r\n                    {artist.spotify ? (\r\n                        <>\r\n                        <img\r\n                            src={artist.spotify.images[0]?.url || 'https://via.placeholder.com/50'}\r\n                            alt={artist.name}\r\n                            className='row-img'\r\n                        />\r\n                        <h3 className=\"row-name\">{artist.spotify.name}</h3>\r\n                        <p className=\"row-info\">Géneros: {formatGenres(artist.spotify.genres)}</p>\r\n                        <p className=\"row-info\">Seguidores: {formatFollowers(artist.spotify.followers)}</p>\r\n                        <button onClick={() => {handleDeleteAdmin(artist.id)}} className=\"row-trash\">\r\n                            <img src={trash} alt=\"Eliminar\" />\r\n                        </button>\r\n                        </>\r\n                    ) : (\r\n                        <h3 className=\"row-name\">{artist.name}</h3> // Solo muestra el nombre si no hay información de Spotify\r\n                    )}\r\n                    </div>\r\n                ))\r\n                )}\r\n                {renderPagination(pageArtists, totalArtists, setPageArtists)}\r\n            </div>\r\n            )}\r\n\r\n        {activeButton === \"graphs\" && (\r\n          <div className=\"admin-table\">\r\n            <p className='admin-text'>Mostrando gráficos...</p>\r\n          </div>\r\n        )}\r\n\r\n        {!activeButton && (\r\n          <div className=\"admin-table\">\r\n            <p className='admin-text'>Selecciona una opción...</p>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}